
ultralydv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008474  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008644  08008644  00018644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008718  08008718  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008720  08008720  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008720  08008720  00018720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008724  08008724  00018724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b28  20000078  080087a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba0  080087a0  00024ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7a3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae8  00000000  00000000  0003a84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246aa  00000000  00000000  00040c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e00  00000000  00000000  000652fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db754  00000000  00000000  0007f0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a84e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce0  00000000  00000000  0015a8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800862c 	.word	0x0800862c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800862c 	.word	0x0800862c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	deftask_init();
 8000da4:	f000 fef6 	bl	8001b94 <deftask_init>
	buzzer_init();
 8000da8:	f000 fea2 	bl	8001af0 <buzzer_init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_GPIO_Init+0xe0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	481d      	ldr	r0, [pc, #116]	; (8000e94 <MX_GPIO_Init+0xe4>)
 8000e20:	f001 f9e2 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2a:	481b      	ldr	r0, [pc, #108]	; (8000e98 <MX_GPIO_Init+0xe8>)
 8000e2c:	f001 f9dc 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_GPIO_Init+0xe8>)
 8000e48:	f001 f83a 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_GPIO_Init+0xe4>)
 8000e64:	f001 f82c 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_GPIO_Init+0xe8>)
 8000e82:	f001 f81d 	bl	8001ec0 <HAL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020800 	.word	0x40020800

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fe8a 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f814 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f7ff ff82 	bl	8000db0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 fc7e 	bl	80017ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f9a6 	bl	8001200 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eb4:	f000 fa44 	bl	8001340 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000eb8:	f000 fa98 	bl	80013ec <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ebc:	f000 fb06 	bl	80014cc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ec0:	f004 f9c6 	bl	8005250 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ec4:	f7ff ff6c 	bl	8000da0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ec8:	f004 f9e6 	bl	8005298 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <main+0x30>
	...

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2234      	movs	r2, #52	; 0x34
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f006 ff3c 	bl	8007d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <SystemClock_Config+0xdc>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a2b      	ldr	r2, [pc, #172]	; (8000fac <SystemClock_Config+0xdc>)
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <SystemClock_Config+0xdc>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <SystemClock_Config+0xe0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <SystemClock_Config+0xe0>)
 8000f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <SystemClock_Config+0xe0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	2310      	movs	r3, #16
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f40:	2308      	movs	r3, #8
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f44:	23b4      	movs	r3, #180	; 0xb4
 8000f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fd13 	bl	8002984 <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f64:	f000 f89a 	bl	800109c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f68:	f001 f972 	bl	8002250 <HAL_PWREx_EnableOverDrive>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f72:	f000 f893 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	230f      	movs	r3, #15
 8000f78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	2105      	movs	r1, #5
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 f9ab 	bl	80022f0 <HAL_RCC_ClockConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fa0:	f000 f87c 	bl	800109c <Error_Handler>
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3750      	adds	r7, #80	; 0x50
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10f      	bne.n	8000fe6 <HAL_TIM_IC_CaptureCallback+0x32>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000fcc:	f001 f925 	bl	800221a <HAL_GPIO_TogglePin>
		captured_value1 = TIM4->CCR1;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000fd8:	601a      	str	r2, [r3, #0]
		TIM4->DIER &= ~(1<<1);
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000fe0:	f023 0302 	bic.w	r3, r3, #2
 8000fe4:	60d3      	str	r3, [r2, #12]
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40000800 	.word	0x40000800
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100c:	d136      	bne.n	800107c <HAL_TIM_PeriodElapsedCallback+0x80>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
		if(hardwareDelayFlag == 1)
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d11b      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x52>
		{
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001016:	2100      	movs	r1, #0
 8001018:	481b      	ldr	r0, [pc, #108]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800101a:	f002 f933 	bl	8003284 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800101e:	2100      	movs	r1, #0
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001022:	f003 fbbb 	bl	800479c <HAL_TIMEx_PWMN_Stop>
			TIM1->CNT = 0;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = 54000;
 800102c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001030:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
			__HAL_TIM_ENABLE(&htim2);
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
			hardwareDelayFlag = 0;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
					TIM4->CNT = 0;
					//TIM4->DIER
		}

	}
}
 800104c:	e016      	b.n	800107c <HAL_TIM_PeriodElapsedCallback+0x80>
					__HAL_TIM_ENABLE(&htim4);
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0201 	orr.w	r2, r2, #1
 800105c:	601a      	str	r2, [r3, #0]
					TIM4->DIER |= (1<<1);
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	60d3      	str	r3, [r2, #12]
					TIM4->SR &= ~(1<<1);
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001070:	f023 0302 	bic.w	r3, r3, #2
 8001074:	6113      	str	r3, [r2, #16]
					TIM4->CNT = 0;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000094 	.word	0x20000094
 8001088:	2000009c 	.word	0x2000009c
 800108c:	40010000 	.word	0x40010000
 8001090:	200000e4 	.word	0x200000e4
 8001094:	2000012c 	.word	0x2000012c
 8001098:	40000800 	.word	0x40000800

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_MspInit+0x54>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_MspInit+0x54>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x54>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_MspInit+0x54>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_MspInit+0x54>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_MspInit+0x54>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	210f      	movs	r1, #15
 80010ea:	f06f 0001 	mvn.w	r0, #1
 80010ee:	f000 feb0 	bl	8001e52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 fd94 	bl	8001c5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001134:	f005 fd76 	bl	8006c24 <xTaskGetSchedulerState>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d001      	beq.n	8001142 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800113e:	f006 fb5b 	bl	80077f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM2_IRQHandler+0x10>)
 800114e:	f002 fae5 	bl	800371c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000e4 	.word	0x200000e4

0800115c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM4_IRQHandler+0x10>)
 8001162:	f002 fadb 	bl	800371c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000012c 	.word	0x2000012c

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f006 fda4 	bl	8007cec <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20020000 	.word	0x20020000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	20000098 	.word	0x20000098
 80011d8:	20004ba0 	.word	0x20004ba0

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b096      	sub	sp, #88	; 0x58
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f006 fd8f 	bl	8007d5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <MX_TIM1_Init+0x138>)
 8001240:	4a3e      	ldr	r2, [pc, #248]	; (800133c <MX_TIM1_Init+0x13c>)
 8001242:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001244:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <MX_TIM1_Init+0x138>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <MX_TIM1_Init+0x138>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 8001250:	4b39      	ldr	r3, [pc, #228]	; (8001338 <MX_TIM1_Init+0x138>)
 8001252:	f241 1294 	movw	r2, #4500	; 0x1194
 8001256:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <MX_TIM1_Init+0x138>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <MX_TIM1_Init+0x138>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001264:	4b34      	ldr	r3, [pc, #208]	; (8001338 <MX_TIM1_Init+0x138>)
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800126a:	4833      	ldr	r0, [pc, #204]	; (8001338 <MX_TIM1_Init+0x138>)
 800126c:	f001 fe28 	bl	8002ec0 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001276:	f7ff ff11 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001284:	4619      	mov	r1, r3
 8001286:	482c      	ldr	r0, [pc, #176]	; (8001338 <MX_TIM1_Init+0x138>)
 8001288:	f002 fcae 	bl	8003be8 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001292:	f7ff ff03 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001296:	4828      	ldr	r0, [pc, #160]	; (8001338 <MX_TIM1_Init+0x138>)
 8001298:	f001 fed2 	bl	8003040 <HAL_TIM_PWM_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012a2:	f7ff fefb 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012b2:	4619      	mov	r1, r3
 80012b4:	4820      	ldr	r0, [pc, #128]	; (8001338 <MX_TIM1_Init+0x138>)
 80012b6:	f003 facf 	bl	8004858 <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012c0:	f7ff feec 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c4:	2360      	movs	r3, #96	; 0x60
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 40;
 80012c8:	2328      	movs	r3, #40	; 0x28
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4813      	ldr	r0, [pc, #76]	; (8001338 <MX_TIM1_Init+0x138>)
 80012ea:	f002 fbbb 	bl	8003a64 <HAL_TIM_PWM_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012f4:	f7ff fed2 	bl	800109c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8001304:	2314      	movs	r3, #20
 8001306:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800130c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001310:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <MX_TIM1_Init+0x138>)
 800131c:	f003 fb18 	bl	8004950 <HAL_TIMEx_ConfigBreakDeadTime>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001326:	f7ff feb9 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <MX_TIM1_Init+0x138>)
 800132c:	f000 f9de 	bl	80016ec <HAL_TIM_MspPostInit>

}
 8001330:	bf00      	nop
 8001332:	3758      	adds	r7, #88	; 0x58
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000009c 	.word	0x2000009c
 800133c:	40010000 	.word	0x40010000

08001340 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_TIM2_Init+0xa8>)
 800135e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_TIM2_Init+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_TIM2_Init+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22500;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_TIM2_Init+0xa8>)
 8001372:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8001376:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_TIM2_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM2_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <MX_TIM2_Init+0xa8>)
 8001386:	f001 fd9b 	bl	8002ec0 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001390:	f7ff fe84 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <MX_TIM2_Init+0xa8>)
 80013a2:	f002 fc21 	bl	8003be8 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013ac:	f7ff fe76 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80013b0:	2108      	movs	r1, #8
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM2_Init+0xa8>)
 80013b4:	f002 f958 	bl	8003668 <HAL_TIM_OnePulse_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013be:	f7ff fe6d 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM2_Init+0xa8>)
 80013d0:	f003 fa42 	bl	8004858 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013da:	f7ff fe5f 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200000e4 	.word	0x200000e4

080013ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001416:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_TIM4_Init+0xd8>)
 8001418:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <MX_TIM4_Init+0xdc>)
 800141a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14;
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_TIM4_Init+0xd8>)
 800141e:	220e      	movs	r2, #14
 8001420:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_TIM4_Init+0xd8>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_TIM4_Init+0xd8>)
 800142a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_TIM4_Init+0xd8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_TIM4_Init+0xd8>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800143c:	4821      	ldr	r0, [pc, #132]	; (80014c4 <MX_TIM4_Init+0xd8>)
 800143e:	f001 fd3f 	bl	8002ec0 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001448:	f7ff fe28 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	4619      	mov	r1, r3
 8001458:	481a      	ldr	r0, [pc, #104]	; (80014c4 <MX_TIM4_Init+0xd8>)
 800145a:	f002 fbc5 	bl	8003be8 <HAL_TIM_ConfigClockSource>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001464:	f7ff fe1a 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001468:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_TIM4_Init+0xd8>)
 800146a:	f001 ff7b 	bl	8003364 <HAL_TIM_IC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001474:	f7ff fe12 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_TIM4_Init+0xd8>)
 8001488:	f003 f9e6 	bl	8004858 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001492:	f7ff fe03 	bl	800109c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800149a:	2301      	movs	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_TIM4_Init+0xd8>)
 80014ae:	f002 fa3d 	bl	800392c <HAL_TIM_IC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80014b8:	f7ff fdf0 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000012c 	.word	0x2000012c
 80014c8:	40000800 	.word	0x40000800

080014cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <MX_TIM5_Init+0xe8>)
 80014fe:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <MX_TIM5_Init+0xec>)
 8001500:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45;
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_TIM5_Init+0xe8>)
 8001504:	222d      	movs	r2, #45	; 0x2d
 8001506:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <MX_TIM5_Init+0xe8>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_TIM5_Init+0xe8>)
 8001510:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001514:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <MX_TIM5_Init+0xe8>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <MX_TIM5_Init+0xe8>)
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001522:	4824      	ldr	r0, [pc, #144]	; (80015b4 <MX_TIM5_Init+0xe8>)
 8001524:	f001 fccc 	bl	8002ec0 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800152e:	f7ff fdb5 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153c:	4619      	mov	r1, r3
 800153e:	481d      	ldr	r0, [pc, #116]	; (80015b4 <MX_TIM5_Init+0xe8>)
 8001540:	f002 fb52 	bl	8003be8 <HAL_TIM_ConfigClockSource>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800154a:	f7ff fda7 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800154e:	4819      	ldr	r0, [pc, #100]	; (80015b4 <MX_TIM5_Init+0xe8>)
 8001550:	f001 fd76 	bl	8003040 <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800155a:	f7ff fd9f 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	4619      	mov	r1, r3
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_TIM5_Init+0xe8>)
 800156e:	f003 f973 	bl	8004858 <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001578:	f7ff fd90 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157c:	2360      	movs	r3, #96	; 0x60
 800157e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM5_Init+0xe8>)
 8001596:	f002 fa65 	bl	8003a64 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80015a0:	f7ff fd7c 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM5_Init+0xe8>)
 80015a6:	f000 f8a1 	bl	80016ec <HAL_TIM_MspPostInit>

}
 80015aa:	bf00      	nop
 80015ac:	3738      	adds	r7, #56	; 0x38
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000174 	.word	0x20000174
 80015b8:	40000c00 	.word	0x40000c00

080015bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a3f      	ldr	r2, [pc, #252]	; (80016d8 <HAL_TIM_Base_MspInit+0x11c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10e      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a3d      	ldr	r2, [pc, #244]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80015fa:	e068      	b.n	80016ce <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001604:	d116      	bne.n	8001634 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a33      	ldr	r2, [pc, #204]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2105      	movs	r1, #5
 8001626:	201c      	movs	r0, #28
 8001628:	f000 fc13 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800162c:	201c      	movs	r0, #28
 800162e:	f000 fc2c 	bl	8001e8a <HAL_NVIC_EnableIRQ>
}
 8001632:	e04c      	b.n	80016ce <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM4)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <HAL_TIM_Base_MspInit+0x124>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d134      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a25      	ldr	r2, [pc, #148]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001686:	2302      	movs	r3, #2
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	4814      	ldr	r0, [pc, #80]	; (80016e4 <HAL_TIM_Base_MspInit+0x128>)
 8001692:	f000 fc15 	bl	8001ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2105      	movs	r1, #5
 800169a:	201e      	movs	r0, #30
 800169c:	f000 fbd9 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016a0:	201e      	movs	r0, #30
 80016a2:	f000 fbf2 	bl	8001e8a <HAL_NVIC_EnableIRQ>
}
 80016a6:	e012      	b.n	80016ce <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM5)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <HAL_TIM_Base_MspInit+0x12c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10d      	bne.n	80016ce <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_TIM_Base_MspInit+0x120>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
}
 80016ce:	bf00      	nop
 80016d0:	3730      	adds	r7, #48	; 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40000800 	.word	0x40000800
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40000c00 	.word	0x40000c00

080016ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_TIM_MspPostInit+0xb0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d11f      	bne.n	800174e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_TIM_MspPostInit+0xb4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_TIM_MspPostInit+0xb4>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_TIM_MspPostInit+0xb4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800172a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800173c:	2301      	movs	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_TIM_MspPostInit+0xb8>)
 8001748:	f000 fbba 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800174c:	e022      	b.n	8001794 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <HAL_TIM_MspPostInit+0xbc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d11d      	bne.n	8001794 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_TIM_MspPostInit+0xb4>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_TIM_MspPostInit+0xb4>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6313      	str	r3, [r2, #48]	; 0x30
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_TIM_MspPostInit+0xb4>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001774:	2301      	movs	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001784:	2302      	movs	r3, #2
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_TIM_MspPostInit+0xb8>)
 8001790:	f000 fb96 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010000 	.word	0x40010000
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40000c00 	.word	0x40000c00

080017ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <MX_USART2_UART_Init+0x50>)
 80017b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017d2:	220c      	movs	r2, #12
 80017d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART2_UART_Init+0x4c>)
 80017e4:	f003 f93f 	bl	8004a66 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ee:	f7ff fc55 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001bc 	.word	0x200001bc
 80017fc:	40004400 	.word	0x40004400

08001800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_UART_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12b      	bne.n	800187a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_UART_MspInit+0x88>)
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_UART_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800185a:	230c      	movs	r3, #12
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186a:	2307      	movs	r3, #7
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_UART_MspInit+0x8c>)
 8001876:	f000 fb23 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40004400 	.word	0x40004400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001896:	490e      	ldr	r1, [pc, #56]	; (80018d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ac:	4c0b      	ldr	r4, [pc, #44]	; (80018dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ba:	f7ff fc8f 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018be:	f006 fa1b 	bl	8007cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff faeb 	bl	8000e9c <main>
  bx  lr    
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80018d4:	08008728 	.word	0x08008728
  ldr r2, =_sbss
 80018d8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80018dc:	20004ba0 	.word	0x20004ba0

080018e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>
 80018e2:	0000      	movs	r0, r0
 80018e4:	0000      	movs	r0, r0
	...

080018e8 <Start_BuzzerTask>:



char txbuff1[50];
void Start_BuzzerTask(void *argument)
{
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzer */
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80018f0:	2100      	movs	r1, #0
 80018f2:	4879      	ldr	r0, [pc, #484]	; (8001ad8 <Start_BuzzerTask+0x1f0>)
 80018f4:	f001 fbfe 	bl	80030f4 <HAL_TIM_PWM_Start>
	  TIM5->CCR1 = 1000;
 80018f8:	4b78      	ldr	r3, [pc, #480]	; (8001adc <Start_BuzzerTask+0x1f4>)
 80018fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
	  int buzzer_toggle = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
	  int buzzer_toggle_cont = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
	  int buzzer_toggle_delay = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
	  int distance = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
	  int constant = 29;
 8001910:	231d      	movs	r3, #29
 8001912:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  distance = *((int *) argument); //0.034cm->0.000001s
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	613b      	str	r3, [r7, #16]

	  distance = (distance/6.15)*0.0342+constant;
 800191a:	6938      	ldr	r0, [r7, #16]
 800191c:	f7fe fe1a 	bl	8000554 <__aeabi_i2d>
 8001920:	a369      	add	r3, pc, #420	; (adr r3, 8001ac8 <Start_BuzzerTask+0x1e0>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe ffa9 	bl	800087c <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	a367      	add	r3, pc, #412	; (adr r3, 8001ad0 <Start_BuzzerTask+0x1e8>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe76 	bl	8000628 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7fe fe05 	bl	8000554 <__aeabi_i2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4620      	mov	r0, r4
 8001950:	4629      	mov	r1, r5
 8001952:	f7fe fcb3 	bl	80002bc <__adddf3>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f875 	bl	8000a4c <__aeabi_d2iz>
 8001962:	4603      	mov	r3, r0
 8001964:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001966:	2120      	movs	r1, #32
 8001968:	485d      	ldr	r0, [pc, #372]	; (8001ae0 <Start_BuzzerTask+0x1f8>)
 800196a:	f000 fc56 	bl	800221a <HAL_GPIO_TogglePin>
	  if((distance > 0)&&(distance <30))
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	dd08      	ble.n	8001986 <Start_BuzzerTask+0x9e>
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b1d      	cmp	r3, #29
 8001978:	dc05      	bgt.n	8001986 <Start_BuzzerTask+0x9e>
		  {
			  buzzer_toggle_delay = 1000;
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 1;
 8001980:	2301      	movs	r3, #1
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	e05c      	b.n	8001a40 <Start_BuzzerTask+0x158>
		  }
	  else if((distance >= 30)&&(distance <60))
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b1d      	cmp	r3, #29
 800198a:	dd07      	ble.n	800199c <Start_BuzzerTask+0xb4>
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2b3b      	cmp	r3, #59	; 0x3b
 8001990:	dc04      	bgt.n	800199c <Start_BuzzerTask+0xb4>
		  {
			  buzzer_toggle_delay = 125;
 8001992:	237d      	movs	r3, #125	; 0x7d
 8001994:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	e051      	b.n	8001a40 <Start_BuzzerTask+0x158>
		  }
	  else if((distance >= 60)&&(distance <90))
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b3b      	cmp	r3, #59	; 0x3b
 80019a0:	dd07      	ble.n	80019b2 <Start_BuzzerTask+0xca>
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b59      	cmp	r3, #89	; 0x59
 80019a6:	dc04      	bgt.n	80019b2 <Start_BuzzerTask+0xca>
	  	  {
			  buzzer_toggle_delay = 142;
 80019a8:	238e      	movs	r3, #142	; 0x8e
 80019aa:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	e046      	b.n	8001a40 <Start_BuzzerTask+0x158>
	  	  }
	  else if((distance >= 90)&&(distance <120))
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b59      	cmp	r3, #89	; 0x59
 80019b6:	dd07      	ble.n	80019c8 <Start_BuzzerTask+0xe0>
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b77      	cmp	r3, #119	; 0x77
 80019bc:	dc04      	bgt.n	80019c8 <Start_BuzzerTask+0xe0>
	  	  {
			  buzzer_toggle_delay = 167;
 80019be:	23a7      	movs	r3, #167	; 0xa7
 80019c0:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	e03b      	b.n	8001a40 <Start_BuzzerTask+0x158>
	  	  }
	  else if((distance >= 120)&&(distance <150))
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	2b77      	cmp	r3, #119	; 0x77
 80019cc:	dd07      	ble.n	80019de <Start_BuzzerTask+0xf6>
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b95      	cmp	r3, #149	; 0x95
 80019d2:	dc04      	bgt.n	80019de <Start_BuzzerTask+0xf6>
	  	  {
			  buzzer_toggle_delay = 200;
 80019d4:	23c8      	movs	r3, #200	; 0xc8
 80019d6:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	e030      	b.n	8001a40 <Start_BuzzerTask+0x158>
	  	  }
	  else if((distance >= 150)&&(distance <180))
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2b95      	cmp	r3, #149	; 0x95
 80019e2:	dd07      	ble.n	80019f4 <Start_BuzzerTask+0x10c>
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2bb3      	cmp	r3, #179	; 0xb3
 80019e8:	dc04      	bgt.n	80019f4 <Start_BuzzerTask+0x10c>
	  	  {
			  buzzer_toggle_delay = 250;
 80019ea:	23fa      	movs	r3, #250	; 0xfa
 80019ec:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	e025      	b.n	8001a40 <Start_BuzzerTask+0x158>
	  	  }
	  else if((distance >= 180)&&(distance <210))
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2bb3      	cmp	r3, #179	; 0xb3
 80019f8:	dd08      	ble.n	8001a0c <Start_BuzzerTask+0x124>
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2bd1      	cmp	r3, #209	; 0xd1
 80019fe:	dc05      	bgt.n	8001a0c <Start_BuzzerTask+0x124>
	  	  {
			  buzzer_toggle_delay = 333;
 8001a00:	f240 134d 	movw	r3, #333	; 0x14d
 8001a04:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	e019      	b.n	8001a40 <Start_BuzzerTask+0x158>
	  	  }
	  else if((distance >= 210)&&(distance <270))
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2bd1      	cmp	r3, #209	; 0xd1
 8001a10:	dd09      	ble.n	8001a26 <Start_BuzzerTask+0x13e>
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001a18:	da05      	bge.n	8001a26 <Start_BuzzerTask+0x13e>
	  	  {
			  buzzer_toggle_delay = 500;
 8001a1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a1e:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	e00c      	b.n	8001a40 <Start_BuzzerTask+0x158>
	  	  }

	  else if((distance >= 270)&&(distance <=300))
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001a2c:	db08      	blt.n	8001a40 <Start_BuzzerTask+0x158>
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a34:	dc04      	bgt.n	8001a40 <Start_BuzzerTask+0x158>
	  	  {
			  buzzer_toggle_delay = 1000;
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	617b      	str	r3, [r7, #20]
			  buzzer_toggle_cont = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
	  	  }

	  sprintf(txbuff1,"distance: %d\n\r",distance);
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4928      	ldr	r1, [pc, #160]	; (8001ae4 <Start_BuzzerTask+0x1fc>)
 8001a44:	4828      	ldr	r0, [pc, #160]	; (8001ae8 <Start_BuzzerTask+0x200>)
 8001a46:	f006 f991 	bl	8007d6c <siprintf>
	  HAL_UART_Transmit(&huart2, &txbuff1, 20, 100);
 8001a4a:	2364      	movs	r3, #100	; 0x64
 8001a4c:	2214      	movs	r2, #20
 8001a4e:	4926      	ldr	r1, [pc, #152]	; (8001ae8 <Start_BuzzerTask+0x200>)
 8001a50:	4826      	ldr	r0, [pc, #152]	; (8001aec <Start_BuzzerTask+0x204>)
 8001a52:	f003 f855 	bl	8004b00 <HAL_UART_Transmit>
	  if(buzzer_toggle == 1)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <Start_BuzzerTask+0x182>
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <Start_BuzzerTask+0x1f0>)
 8001a60:	f001 fb48 	bl	80030f4 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	e012      	b.n	8001a90 <Start_BuzzerTask+0x1a8>

	  }
	  else if((buzzer_toggle == 0)&&(buzzer_toggle_cont == 0))
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <Start_BuzzerTask+0x19c>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <Start_BuzzerTask+0x19c>
	  {
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001a76:	2100      	movs	r1, #0
 8001a78:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <Start_BuzzerTask+0x1f0>)
 8001a7a:	f001 fc03 	bl	8003284 <HAL_TIM_PWM_Stop>
		  buzzer_toggle = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e005      	b.n	8001a90 <Start_BuzzerTask+0x1a8>
	  }
	  else
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001a84:	2100      	movs	r1, #0
 8001a86:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <Start_BuzzerTask+0x1f0>)
 8001a88:	f001 fb34 	bl	80030f4 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
	  }
	  if(distance < 1)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	dc06      	bgt.n	8001aa4 <Start_BuzzerTask+0x1bc>
	  {
		  buzzer_toggle_delay = 2000;
 8001a96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a9a:	617b      	str	r3, [r7, #20]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <Start_BuzzerTask+0x1f0>)
 8001aa0:	f001 fbf0 	bl	8003284 <HAL_TIM_PWM_Stop>
	  }
	  if(distance >300)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aaa:	dd06      	ble.n	8001aba <Start_BuzzerTask+0x1d2>
	  {
		  buzzer_toggle_delay = 2000;
 8001aac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ab0:	617b      	str	r3, [r7, #20]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <Start_BuzzerTask+0x1f0>)
 8001ab6:	f001 fbe5 	bl	8003284 <HAL_TIM_PWM_Stop>
	  }

    osDelay(buzzer_toggle_delay);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fca3 	bl	8005408 <osDelay>
	  distance = *((int *) argument); //0.034cm->0.000001s
 8001ac2:	e727      	b.n	8001914 <Start_BuzzerTask+0x2c>
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	40189999 	.word	0x40189999
 8001ad0:	930be0df 	.word	0x930be0df
 8001ad4:	3fa182a9 	.word	0x3fa182a9
 8001ad8:	20000174 	.word	0x20000174
 8001adc:	40000c00 	.word	0x40000c00
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	08008650 	.word	0x08008650
 8001ae8:	20000204 	.word	0x20000204
 8001aec:	200001bc 	.word	0x200001bc

08001af0 <buzzer_init>:
  }

}
void buzzer_init(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
/* creation of Buzzer_Task */
Buzzer_TaskHandle = osThreadNew(Start_BuzzerTask, &captured_value1, &Buzzer_Task_attributes);
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <buzzer_init+0x18>)
 8001af6:	4905      	ldr	r1, [pc, #20]	; (8001b0c <buzzer_init+0x1c>)
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <buzzer_init+0x20>)
 8001afa:	f003 fbf3 	bl	80052e4 <osThreadNew>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <buzzer_init+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	0800869c 	.word	0x0800869c
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	080018e9 	.word	0x080018e9
 8001b14:	20000200 	.word	0x20000200

08001b18 <StartDefaultTask>:
  .priority = (osPriority_t) osPriorityNormal,
};
void StartDefaultTask(void *argument);

void StartDefaultTask(void *argument)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	HAL_TIM_Base_Start_IT(&htim2);
 8001b20:	4816      	ldr	r0, [pc, #88]	; (8001b7c <StartDefaultTask+0x64>)
 8001b22:	f001 fa1d 	bl	8002f60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001b26:	2100      	movs	r1, #0
 8001b28:	4815      	ldr	r0, [pc, #84]	; (8001b80 <StartDefaultTask+0x68>)
 8001b2a:	f001 fc75 	bl	8003418 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {

	  		TIM2->ARR = 22500;
 8001b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b32:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
	  		__HAL_TIM_ENABLE(&htim2);
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <StartDefaultTask+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <StartDefaultTask+0x64>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
	  		TIM1->CCR1 = 2250;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <StartDefaultTask+0x6c>)
 8001b4a:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001b50:	2100      	movs	r1, #0
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <StartDefaultTask+0x70>)
 8001b54:	f002 fd68 	bl	8004628 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	480b      	ldr	r0, [pc, #44]	; (8001b88 <StartDefaultTask+0x70>)
 8001b5c:	f001 faca 	bl	80030f4 <HAL_TIM_PWM_Start>
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
	  		hardwareDelayFlag = 1;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <StartDefaultTask+0x74>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
	  		TIM4->DIER &= ~(1<<1);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <StartDefaultTask+0x78>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <StartDefaultTask+0x78>)
 8001b6c:	f023 0302 	bic.w	r3, r3, #2
 8001b70:	60d3      	str	r3, [r2, #12]


//	  	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
    osDelay(1000);
 8001b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b76:	f003 fc47 	bl	8005408 <osDelay>
	  		TIM2->ARR = 22500;
 8001b7a:	e7d8      	b.n	8001b2e <StartDefaultTask+0x16>
 8001b7c:	200000e4 	.word	0x200000e4
 8001b80:	2000012c 	.word	0x2000012c
 8001b84:	40010000 	.word	0x40010000
 8001b88:	2000009c 	.word	0x2000009c
 8001b8c:	20000094 	.word	0x20000094
 8001b90:	40000800 	.word	0x40000800

08001b94 <deftask_init>:
  }
  /* USER CODE END StartDefaultTask */
}

void deftask_init(){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <deftask_init+0x18>)
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <deftask_init+0x1c>)
 8001b9e:	f003 fba1 	bl	80052e4 <osThreadNew>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <deftask_init+0x20>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	080086c0 	.word	0x080086c0
 8001bb0:	08001b19 	.word	0x08001b19
 8001bb4:	20000238 	.word	0x20000238

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f92b 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	200f      	movs	r0, #15
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fa5c 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f943 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f90b 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000004 	.word	0x20000004
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	20000008 	.word	0x20000008

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	2000023c 	.word	0x2000023c

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000023c 	.word	0x2000023c

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	; (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff29 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff3e 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff8e 	bl	8001d90 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5d 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff31 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e165      	b.n	80021a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8154 	bne.w	80021a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d005      	beq.n	8001f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d130      	bne.n	8001f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 0201 	and.w	r2, r3, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d017      	beq.n	8001fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d123      	bne.n	8002004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0203 	and.w	r2, r3, #3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80ae 	beq.w	80021a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_GPIO_Init+0x300>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_GPIO_Init+0x308>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d025      	beq.n	80020da <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4e      	ldr	r2, [pc, #312]	; (80021cc <HAL_GPIO_Init+0x30c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_GPIO_Init+0x310>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x314>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x318>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x20a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x31c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x206>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_GPIO_Init+0x320>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x202>
 80020be:	2306      	movs	r3, #6
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	; (80021c4 <HAL_GPIO_Init+0x304>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_GPIO_Init+0x324>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae96 	bls.w	8001edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002204:	e003      	b.n	800220e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43d9      	mvns	r1, r3
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800227c:	f7ff fd02 	bl	8001c84 <HAL_GetTick>
 8002280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002282:	e009      	b.n	8002298 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002284:	f7ff fcfe 	bl	8001c84 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002292:	d901      	bls.n	8002298 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e01f      	b.n	80022d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a4:	d1ee      	bne.n	8002284 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ac:	f7ff fcea 	bl	8001c84 <HAL_GetTick>
 80022b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022b2:	e009      	b.n	80022c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022b4:	f7ff fce6 	bl	8001c84 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c2:	d901      	bls.n	80022c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e007      	b.n	80022d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022d4:	d1ee      	bne.n	80022b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	420e0040 	.word	0x420e0040
 80022e8:	40007000 	.word	0x40007000
 80022ec:	420e0044 	.word	0x420e0044

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0cc      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d90c      	bls.n	800232c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d044      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d119      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e067      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7ff fc50 	bl	8001c84 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff fc4c 	bl	8001c84 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e04f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20c      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002476:	f000 f855 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fbb0 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08008684 	.word	0x08008684
 80024b4:	20000004 	.word	0x20000004
 80024b8:	20000008 	.word	0x20000008

080024bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d8:	f7ff fff0 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0a9b      	lsrs	r3, r3, #10
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08008694 	.word	0x08008694

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002500:	f7ff ffdc 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0b5b      	lsrs	r3, r3, #13
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	08008694 	.word	0x08008694

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b0ae      	sub	sp, #184	; 0xb8
 800252a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254a:	4bcb      	ldr	r3, [pc, #812]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b0c      	cmp	r3, #12
 8002554:	f200 8206 	bhi.w	8002964 <HAL_RCC_GetSysClockFreq+0x440>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <HAL_RCC_GetSysClockFreq+0x3c>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002595 	.word	0x08002595
 8002564:	08002965 	.word	0x08002965
 8002568:	08002965 	.word	0x08002965
 800256c:	08002965 	.word	0x08002965
 8002570:	0800259d 	.word	0x0800259d
 8002574:	08002965 	.word	0x08002965
 8002578:	08002965 	.word	0x08002965
 800257c:	08002965 	.word	0x08002965
 8002580:	080025a5 	.word	0x080025a5
 8002584:	08002965 	.word	0x08002965
 8002588:	08002965 	.word	0x08002965
 800258c:	08002965 	.word	0x08002965
 8002590:	08002795 	.word	0x08002795
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4bb9      	ldr	r3, [pc, #740]	; (800287c <HAL_RCC_GetSysClockFreq+0x358>)
 8002596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800259a:	e1e7      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259c:	4bb8      	ldr	r3, [pc, #736]	; (8002880 <HAL_RCC_GetSysClockFreq+0x35c>)
 800259e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025a2:	e1e3      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4bb4      	ldr	r3, [pc, #720]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b0:	4bb1      	ldr	r3, [pc, #708]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d071      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025bc:	4bae      	ldr	r3, [pc, #696]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025e2:	4622      	mov	r2, r4
 80025e4:	462b      	mov	r3, r5
 80025e6:	f04f 0000 	mov.w	r0, #0
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f4:	0150      	lsls	r0, r2, #5
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4621      	mov	r1, r4
 80025fc:	1a51      	subs	r1, r2, r1
 80025fe:	6439      	str	r1, [r7, #64]	; 0x40
 8002600:	4629      	mov	r1, r5
 8002602:	eb63 0301 	sbc.w	r3, r3, r1
 8002606:	647b      	str	r3, [r7, #68]	; 0x44
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002614:	4649      	mov	r1, r9
 8002616:	018b      	lsls	r3, r1, #6
 8002618:	4641      	mov	r1, r8
 800261a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261e:	4641      	mov	r1, r8
 8002620:	018a      	lsls	r2, r1, #6
 8002622:	4641      	mov	r1, r8
 8002624:	1a51      	subs	r1, r2, r1
 8002626:	63b9      	str	r1, [r7, #56]	; 0x38
 8002628:	4649      	mov	r1, r9
 800262a:	eb63 0301 	sbc.w	r3, r3, r1
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800263c:	4649      	mov	r1, r9
 800263e:	00cb      	lsls	r3, r1, #3
 8002640:	4641      	mov	r1, r8
 8002642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002646:	4641      	mov	r1, r8
 8002648:	00ca      	lsls	r2, r1, #3
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	4603      	mov	r3, r0
 8002650:	4622      	mov	r2, r4
 8002652:	189b      	adds	r3, r3, r2
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
 8002656:	462b      	mov	r3, r5
 8002658:	460a      	mov	r2, r1
 800265a:	eb42 0303 	adc.w	r3, r2, r3
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800266c:	4629      	mov	r1, r5
 800266e:	024b      	lsls	r3, r1, #9
 8002670:	4621      	mov	r1, r4
 8002672:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002676:	4621      	mov	r1, r4
 8002678:	024a      	lsls	r2, r1, #9
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002688:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800268c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002690:	f7fe fa04 	bl	8000a9c <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800269e:	e067      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a0:	4b75      	ldr	r3, [pc, #468]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80026b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ba:	2300      	movs	r3, #0
 80026bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4621      	mov	r1, r4
 80026dc:	1a51      	subs	r1, r2, r1
 80026de:	62b9      	str	r1, [r7, #40]	; 0x28
 80026e0:	4629      	mov	r1, r5
 80026e2:	eb63 0301 	sbc.w	r3, r3, r1
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026f4:	4649      	mov	r1, r9
 80026f6:	018b      	lsls	r3, r1, #6
 80026f8:	4641      	mov	r1, r8
 80026fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fe:	4641      	mov	r1, r8
 8002700:	018a      	lsls	r2, r1, #6
 8002702:	4641      	mov	r1, r8
 8002704:	ebb2 0a01 	subs.w	sl, r2, r1
 8002708:	4649      	mov	r1, r9
 800270a:	eb63 0b01 	sbc.w	fp, r3, r1
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800271a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800271e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002722:	4692      	mov	sl, r2
 8002724:	469b      	mov	fp, r3
 8002726:	4623      	mov	r3, r4
 8002728:	eb1a 0303 	adds.w	r3, sl, r3
 800272c:	623b      	str	r3, [r7, #32]
 800272e:	462b      	mov	r3, r5
 8002730:	eb4b 0303 	adc.w	r3, fp, r3
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002742:	4629      	mov	r1, r5
 8002744:	028b      	lsls	r3, r1, #10
 8002746:	4621      	mov	r1, r4
 8002748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800274c:	4621      	mov	r1, r4
 800274e:	028a      	lsls	r2, r1, #10
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002758:	2200      	movs	r2, #0
 800275a:	673b      	str	r3, [r7, #112]	; 0x70
 800275c:	677a      	str	r2, [r7, #116]	; 0x74
 800275e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002762:	f7fe f99b 	bl	8000a9c <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4613      	mov	r3, r2
 800276c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002770:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	0c1b      	lsrs	r3, r3, #16
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002792:	e0eb      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002794:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800279c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a0:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d06b      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	2200      	movs	r2, #0
 80027b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	663b      	str	r3, [r7, #96]	; 0x60
 80027c0:	2300      	movs	r3, #0
 80027c2:	667b      	str	r3, [r7, #100]	; 0x64
 80027c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027c8:	4622      	mov	r2, r4
 80027ca:	462b      	mov	r3, r5
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	0159      	lsls	r1, r3, #5
 80027d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027da:	0150      	lsls	r0, r2, #5
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4621      	mov	r1, r4
 80027e2:	1a51      	subs	r1, r2, r1
 80027e4:	61b9      	str	r1, [r7, #24]
 80027e6:	4629      	mov	r1, r5
 80027e8:	eb63 0301 	sbc.w	r3, r3, r1
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027fa:	4659      	mov	r1, fp
 80027fc:	018b      	lsls	r3, r1, #6
 80027fe:	4651      	mov	r1, sl
 8002800:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002804:	4651      	mov	r1, sl
 8002806:	018a      	lsls	r2, r1, #6
 8002808:	4651      	mov	r1, sl
 800280a:	ebb2 0801 	subs.w	r8, r2, r1
 800280e:	4659      	mov	r1, fp
 8002810:	eb63 0901 	sbc.w	r9, r3, r1
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002820:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002824:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002828:	4690      	mov	r8, r2
 800282a:	4699      	mov	r9, r3
 800282c:	4623      	mov	r3, r4
 800282e:	eb18 0303 	adds.w	r3, r8, r3
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	462b      	mov	r3, r5
 8002836:	eb49 0303 	adc.w	r3, r9, r3
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002848:	4629      	mov	r1, r5
 800284a:	024b      	lsls	r3, r1, #9
 800284c:	4621      	mov	r1, r4
 800284e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002852:	4621      	mov	r1, r4
 8002854:	024a      	lsls	r2, r1, #9
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800285e:	2200      	movs	r2, #0
 8002860:	65bb      	str	r3, [r7, #88]	; 0x58
 8002862:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002864:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002868:	f7fe f918 	bl	8000a9c <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002876:	e065      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x420>
 8002878:	40023800 	.word	0x40023800
 800287c:	00f42400 	.word	0x00f42400
 8002880:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002884:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_RCC_GetSysClockFreq+0x458>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	2200      	movs	r2, #0
 800288c:	4618      	mov	r0, r3
 800288e:	4611      	mov	r1, r2
 8002890:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002894:	653b      	str	r3, [r7, #80]	; 0x50
 8002896:	2300      	movs	r3, #0
 8002898:	657b      	str	r3, [r7, #84]	; 0x54
 800289a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800289e:	4642      	mov	r2, r8
 80028a0:	464b      	mov	r3, r9
 80028a2:	f04f 0000 	mov.w	r0, #0
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	0159      	lsls	r1, r3, #5
 80028ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b0:	0150      	lsls	r0, r2, #5
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4641      	mov	r1, r8
 80028b8:	1a51      	subs	r1, r2, r1
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	4649      	mov	r1, r9
 80028be:	eb63 0301 	sbc.w	r3, r3, r1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028d0:	4659      	mov	r1, fp
 80028d2:	018b      	lsls	r3, r1, #6
 80028d4:	4651      	mov	r1, sl
 80028d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028da:	4651      	mov	r1, sl
 80028dc:	018a      	lsls	r2, r1, #6
 80028de:	4651      	mov	r1, sl
 80028e0:	1a54      	subs	r4, r2, r1
 80028e2:	4659      	mov	r1, fp
 80028e4:	eb63 0501 	sbc.w	r5, r3, r1
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	00eb      	lsls	r3, r5, #3
 80028f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f6:	00e2      	lsls	r2, r4, #3
 80028f8:	4614      	mov	r4, r2
 80028fa:	461d      	mov	r5, r3
 80028fc:	4643      	mov	r3, r8
 80028fe:	18e3      	adds	r3, r4, r3
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	464b      	mov	r3, r9
 8002904:	eb45 0303 	adc.w	r3, r5, r3
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002916:	4629      	mov	r1, r5
 8002918:	028b      	lsls	r3, r1, #10
 800291a:	4621      	mov	r1, r4
 800291c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002920:	4621      	mov	r1, r4
 8002922:	028a      	lsls	r2, r1, #10
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800292c:	2200      	movs	r2, #0
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002930:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002932:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002936:	f7fe f8b1 	bl	8000a9c <__aeabi_uldivmod>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4613      	mov	r3, r2
 8002940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_RCC_GetSysClockFreq+0x458>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0f1b      	lsrs	r3, r3, #28
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002962:	e003      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800296a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002970:	4618      	mov	r0, r3
 8002972:	37b8      	adds	r7, #184	; 0xb8
 8002974:	46bd      	mov	sp, r7
 8002976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	00f42400 	.word	0x00f42400

08002984 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e28d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8083 	beq.w	8002aaa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a4:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d019      	beq.n	80029e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029b0:	4b91      	ldr	r3, [pc, #580]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029bc:	4b8e      	ldr	r3, [pc, #568]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c8:	d00c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ca:	4b8b      	ldr	r3, [pc, #556]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d112      	bne.n	80029fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b88      	ldr	r3, [pc, #544]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b84      	ldr	r3, [pc, #528]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05b      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x124>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d157      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e25a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x90>
 8002a06:	4b7c      	ldr	r3, [pc, #496]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7b      	ldr	r2, [pc, #492]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xcc>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0xb4>
 8002a1e:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a75      	ldr	r2, [pc, #468]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b73      	ldr	r3, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a72      	ldr	r2, [pc, #456]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xcc>
 8002a38:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a6e      	ldr	r2, [pc, #440]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6b      	ldr	r2, [pc, #428]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7ff f914 	bl	8001c84 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff f910 	bl	8001c84 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e21f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xdc>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff f900 	bl	8001c84 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff f8fc 	bl	8001c84 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e20b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x104>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d06f      	beq.n	8002b96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ab6:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d017      	beq.n	8002af2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ac2:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d105      	bne.n	8002ada <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ace:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae2:	2b0c      	cmp	r3, #12
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x186>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1d3      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4937      	ldr	r1, [pc, #220]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_RCC_OscConfig+0x278>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7ff f8a9 	bl	8001c84 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7ff f8a5 	bl	8001c84 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1b4      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4925      	ldr	r1, [pc, #148]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x278>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7ff f888 	bl	8001c84 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7ff f884 	bl	8001c84 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e193      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d036      	beq.n	8002c10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f868 	bl	8001c84 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f864 	bl	8001c84 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e173      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x234>
 8002bd6:	e01b      	b.n	8002c10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x27c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7ff f851 	bl	8001c84 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	e00e      	b.n	8002c04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be6:	f7ff f84d 	bl	8001c84 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d907      	bls.n	8002c04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e15c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	42470000 	.word	0x42470000
 8002c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	4b8a      	ldr	r3, [pc, #552]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ea      	bne.n	8002be6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8097 	beq.w	8002d4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c22:	4b83      	ldr	r3, [pc, #524]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	4b7f      	ldr	r3, [pc, #508]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a7e      	ldr	r2, [pc, #504]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b7c      	ldr	r3, [pc, #496]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <HAL_RCC_OscConfig+0x4b0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x4b0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a75      	ldr	r2, [pc, #468]	; (8002e34 <HAL_RCC_OscConfig+0x4b0>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7ff f80d 	bl	8001c84 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7ff f809 	bl	8001c84 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e118      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <HAL_RCC_OscConfig+0x4b0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x31e>
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x358>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x340>
 8002caa:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a60      	ldr	r2, [pc, #384]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a5d      	ldr	r2, [pc, #372]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0x358>
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a59      	ldr	r2, [pc, #356]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe ffce 	bl	8001c84 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe ffca 	bl	8001c84 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0d7      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ee      	beq.n	8002cec <HAL_RCC_OscConfig+0x368>
 8002d0e:	e014      	b.n	8002d3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe ffb8 	bl	8001c84 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe ffb4 	bl	8001c84 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0c1      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ee      	bne.n	8002d18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	4a3a      	ldr	r2, [pc, #232]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80ad 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d060      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d145      	bne.n	8002df6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_RCC_OscConfig+0x4b4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe ff88 	bl	8001c84 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe ff84 	bl	8001c84 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e093      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	019b      	lsls	r3, r3, #6
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	3b01      	subs	r3, #1
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	071b      	lsls	r3, r3, #28
 8002dc2:	491b      	ldr	r1, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x4b4>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe ff59 	bl	8001c84 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe ff55 	bl	8001c84 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e064      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x452>
 8002df4:	e05c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <HAL_RCC_OscConfig+0x4b4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe ff42 	bl	8001c84 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe ff3e 	bl	8001c84 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e04d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x480>
 8002e22:	e045      	b.n	8002eb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e040      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000
 8002e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_RCC_OscConfig+0x538>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d030      	beq.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d129      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d122      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d119      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	3b01      	subs	r3, #1
 8002e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d10f      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e041      	b.n	8002f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fb68 	bl	80015bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 ff58 	bl	8003db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d001      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e04e      	b.n	8003016 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d022      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x80>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa2:	d01d      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x80>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_TIM_Base_Start_IT+0xc8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d018      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x80>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_TIM_Base_Start_IT+0xcc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x80>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x80>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x80>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x80>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_TIM_Base_Start_IT+0xdc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d111      	bne.n	8003004 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d010      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003002:	e007      	b.n	8003014 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40010000 	.word	0x40010000
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800
 8003030:	40000c00 	.word	0x40000c00
 8003034:	40010400 	.word	0x40010400
 8003038:	40014000 	.word	0x40014000
 800303c:	40001800 	.word	0x40001800

08003040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e041      	b.n	80030d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f839 	bl	80030de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f000 fe98 	bl	8003db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_TIM_PWM_Start+0x24>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e022      	b.n	800315e <HAL_TIM_PWM_Start+0x6a>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d109      	bne.n	8003132 <HAL_TIM_PWM_Start+0x3e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e015      	b.n	800315e <HAL_TIM_PWM_Start+0x6a>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d109      	bne.n	800314c <HAL_TIM_PWM_Start+0x58>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e008      	b.n	800315e <HAL_TIM_PWM_Start+0x6a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07c      	b.n	8003260 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <HAL_TIM_PWM_Start+0x82>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003174:	e013      	b.n	800319e <HAL_TIM_PWM_Start+0xaa>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d104      	bne.n	8003186 <HAL_TIM_PWM_Start+0x92>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003184:	e00b      	b.n	800319e <HAL_TIM_PWM_Start+0xaa>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start+0xa2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003194:	e003      	b.n	800319e <HAL_TIM_PWM_Start+0xaa>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	6839      	ldr	r1, [r7, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 fa18 	bl	80045dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <HAL_TIM_PWM_Start+0x174>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_TIM_PWM_Start+0xcc>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <HAL_TIM_PWM_Start+0x178>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d101      	bne.n	80031c4 <HAL_TIM_PWM_Start+0xd0>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_TIM_PWM_Start+0xd2>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a22      	ldr	r2, [pc, #136]	; (8003268 <HAL_TIM_PWM_Start+0x174>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_TIM_PWM_Start+0x136>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d01d      	beq.n	800322a <HAL_TIM_PWM_Start+0x136>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_TIM_PWM_Start+0x17c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d018      	beq.n	800322a <HAL_TIM_PWM_Start+0x136>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <HAL_TIM_PWM_Start+0x180>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_TIM_PWM_Start+0x136>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <HAL_TIM_PWM_Start+0x184>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_TIM_PWM_Start+0x136>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a16      	ldr	r2, [pc, #88]	; (800326c <HAL_TIM_PWM_Start+0x178>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_TIM_PWM_Start+0x136>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a18      	ldr	r2, [pc, #96]	; (800327c <HAL_TIM_PWM_Start+0x188>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_TIM_PWM_Start+0x136>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a16      	ldr	r2, [pc, #88]	; (8003280 <HAL_TIM_PWM_Start+0x18c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d111      	bne.n	800324e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b06      	cmp	r3, #6
 800323a:	d010      	beq.n	800325e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324c:	e007      	b.n	800325e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40010000 	.word	0x40010000
 800326c:	40010400 	.word	0x40010400
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	40014000 	.word	0x40014000
 8003280:	40001800 	.word	0x40001800

08003284 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f9a0 	bl	80045dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2e      	ldr	r2, [pc, #184]	; (800335c <HAL_TIM_PWM_Stop+0xd8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_TIM_PWM_Stop+0x2c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2d      	ldr	r2, [pc, #180]	; (8003360 <HAL_TIM_PWM_Stop+0xdc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_TIM_PWM_Stop+0x30>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_TIM_PWM_Stop+0x32>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d017      	beq.n	80032ea <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a1a      	ldr	r2, [r3, #32]
 80032c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <HAL_TIM_PWM_Stop+0x66>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	f240 4344 	movw	r3, #1092	; 0x444
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_TIM_PWM_Stop+0x66>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_TIM_PWM_Stop+0x96>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	f240 4344 	movw	r3, #1092	; 0x444
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_TIM_PWM_Stop+0x96>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_TIM_PWM_Stop+0xa6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003328:	e013      	b.n	8003352 <HAL_TIM_PWM_Stop+0xce>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d104      	bne.n	800333a <HAL_TIM_PWM_Stop+0xb6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003338:	e00b      	b.n	8003352 <HAL_TIM_PWM_Stop+0xce>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d104      	bne.n	800334a <HAL_TIM_PWM_Stop+0xc6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003348:	e003      	b.n	8003352 <HAL_TIM_PWM_Stop+0xce>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40010000 	.word	0x40010000
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e041      	b.n	80033fa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f839 	bl	8003402 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f000 fd06 	bl	8003db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <HAL_TIM_IC_Start_IT+0x1e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003432:	b2db      	uxtb	r3, r3
 8003434:	e013      	b.n	800345e <HAL_TIM_IC_Start_IT+0x46>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d104      	bne.n	8003446 <HAL_TIM_IC_Start_IT+0x2e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003442:	b2db      	uxtb	r3, r3
 8003444:	e00b      	b.n	800345e <HAL_TIM_IC_Start_IT+0x46>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d104      	bne.n	8003456 <HAL_TIM_IC_Start_IT+0x3e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003452:	b2db      	uxtb	r3, r3
 8003454:	e003      	b.n	800345e <HAL_TIM_IC_Start_IT+0x46>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <HAL_TIM_IC_Start_IT+0x58>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e013      	b.n	8003498 <HAL_TIM_IC_Start_IT+0x80>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d104      	bne.n	8003480 <HAL_TIM_IC_Start_IT+0x68>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e00b      	b.n	8003498 <HAL_TIM_IC_Start_IT+0x80>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b08      	cmp	r3, #8
 8003484:	d104      	bne.n	8003490 <HAL_TIM_IC_Start_IT+0x78>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e003      	b.n	8003498 <HAL_TIM_IC_Start_IT+0x80>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003496:	b2db      	uxtb	r3, r3
 8003498:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800349a:	7bbb      	ldrb	r3, [r7, #14]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d102      	bne.n	80034a6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80034a0:	7b7b      	ldrb	r3, [r7, #13]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d001      	beq.n	80034aa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0cc      	b.n	8003644 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d104      	bne.n	80034ba <HAL_TIM_IC_Start_IT+0xa2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b8:	e013      	b.n	80034e2 <HAL_TIM_IC_Start_IT+0xca>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d104      	bne.n	80034ca <HAL_TIM_IC_Start_IT+0xb2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c8:	e00b      	b.n	80034e2 <HAL_TIM_IC_Start_IT+0xca>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d104      	bne.n	80034da <HAL_TIM_IC_Start_IT+0xc2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	e003      	b.n	80034e2 <HAL_TIM_IC_Start_IT+0xca>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d104      	bne.n	80034f2 <HAL_TIM_IC_Start_IT+0xda>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f0:	e013      	b.n	800351a <HAL_TIM_IC_Start_IT+0x102>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_IC_Start_IT+0xea>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003500:	e00b      	b.n	800351a <HAL_TIM_IC_Start_IT+0x102>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d104      	bne.n	8003512 <HAL_TIM_IC_Start_IT+0xfa>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003510:	e003      	b.n	800351a <HAL_TIM_IC_Start_IT+0x102>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d841      	bhi.n	80035a4 <HAL_TIM_IC_Start_IT+0x18c>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <HAL_TIM_IC_Start_IT+0x110>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800355d 	.word	0x0800355d
 800352c:	080035a5 	.word	0x080035a5
 8003530:	080035a5 	.word	0x080035a5
 8003534:	080035a5 	.word	0x080035a5
 8003538:	0800356f 	.word	0x0800356f
 800353c:	080035a5 	.word	0x080035a5
 8003540:	080035a5 	.word	0x080035a5
 8003544:	080035a5 	.word	0x080035a5
 8003548:	08003581 	.word	0x08003581
 800354c:	080035a5 	.word	0x080035a5
 8003550:	080035a5 	.word	0x080035a5
 8003554:	080035a5 	.word	0x080035a5
 8003558:	08003593 	.word	0x08003593
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0202 	orr.w	r2, r2, #2
 800356a:	60da      	str	r2, [r3, #12]
      break;
 800356c:	e01d      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0204 	orr.w	r2, r2, #4
 800357c:	60da      	str	r2, [r3, #12]
      break;
 800357e:	e014      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0208 	orr.w	r2, r2, #8
 800358e:	60da      	str	r2, [r3, #12]
      break;
 8003590:	e00b      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0210 	orr.w	r2, r2, #16
 80035a0:	60da      	str	r2, [r3, #12]
      break;
 80035a2:	e002      	b.n	80035aa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      break;
 80035a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d148      	bne.n	8003642 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2201      	movs	r2, #1
 80035b6:	6839      	ldr	r1, [r7, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 f80f 	bl	80045dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <HAL_TIM_IC_Start_IT+0x234>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x1f6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d01d      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x1f6>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <HAL_TIM_IC_Start_IT+0x238>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x1f6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_TIM_IC_Start_IT+0x23c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x1f6>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <HAL_TIM_IC_Start_IT+0x240>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x1f6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <HAL_TIM_IC_Start_IT+0x244>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x1f6>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a18      	ldr	r2, [pc, #96]	; (8003660 <HAL_TIM_IC_Start_IT+0x248>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x1f6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a16      	ldr	r2, [pc, #88]	; (8003664 <HAL_TIM_IC_Start_IT+0x24c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d111      	bne.n	8003632 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d010      	beq.n	8003642 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	e007      	b.n	8003642 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40010000 	.word	0x40010000
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800
 8003658:	40000c00 	.word	0x40000c00
 800365c:	40010400 	.word	0x40010400
 8003660:	40014000 	.word	0x40014000
 8003664:	40001800 	.word	0x40001800

08003668 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e041      	b.n	8003700 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f839 	bl	8003708 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f000 fb83 	bl	8003db4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0208 	bic.w	r2, r2, #8
 80036bc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d122      	bne.n	8003778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b02      	cmp	r3, #2
 800373e:	d11b      	bne.n	8003778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0202 	mvn.w	r2, #2
 8003748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fc28 	bl	8000fb4 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fb05 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fb0c 	bl	8003d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b04      	cmp	r3, #4
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0204 	mvn.w	r2, #4
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fbfe 	bl	8000fb4 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fadb 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fae2 	bl	8003d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0208 	mvn.w	r2, #8
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2204      	movs	r2, #4
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fbd4 	bl	8000fb4 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fab1 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fab8 	bl	8003d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b10      	cmp	r3, #16
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0210 	mvn.w	r2, #16
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2208      	movs	r2, #8
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd fbaa 	bl	8000fb4 <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa87 	bl	8003d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa8e 	bl	8003d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10e      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0201 	mvn.w	r2, #1
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fbae 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d10e      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d107      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f001 f89e 	bl	8004a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d10e      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d107      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa53 	bl	8003d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b20      	cmp	r3, #32
 8003904:	d10e      	bne.n	8003924 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b20      	cmp	r3, #32
 8003912:	d107      	bne.n	8003924 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0220 	mvn.w	r2, #32
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f001 f868 	bl	80049f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003946:	2302      	movs	r3, #2
 8003948:	e088      	b.n	8003a5c <HAL_TIM_IC_ConfigChannel+0x130>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6819      	ldr	r1, [r3, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f000 fc74 	bl	8004254 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 020c 	bic.w	r2, r2, #12
 800397a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6999      	ldr	r1, [r3, #24]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	619a      	str	r2, [r3, #24]
 800398e:	e060      	b.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d11c      	bne.n	80039d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6819      	ldr	r1, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f000 fcf8 	bl	800439a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6999      	ldr	r1, [r3, #24]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	021a      	lsls	r2, r3, #8
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	619a      	str	r2, [r3, #24]
 80039ce:	e040      	b.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d11b      	bne.n	8003a0e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f000 fd45 	bl	8004474 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 020c 	bic.w	r2, r2, #12
 80039f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69d9      	ldr	r1, [r3, #28]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	61da      	str	r2, [r3, #28]
 8003a0c:	e021      	b.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	d11c      	bne.n	8003a4e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f000 fd62 	bl	80044ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69d9      	ldr	r1, [r3, #28]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	61da      	str	r2, [r3, #28]
 8003a4c:	e001      	b.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e0ae      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	f200 809f 	bhi.w	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003bd1 	.word	0x08003bd1
 8003aa0:	08003bd1 	.word	0x08003bd1
 8003aa4:	08003bd1 	.word	0x08003bd1
 8003aa8:	08003b0d 	.word	0x08003b0d
 8003aac:	08003bd1 	.word	0x08003bd1
 8003ab0:	08003bd1 	.word	0x08003bd1
 8003ab4:	08003bd1 	.word	0x08003bd1
 8003ab8:	08003b4f 	.word	0x08003b4f
 8003abc:	08003bd1 	.word	0x08003bd1
 8003ac0:	08003bd1 	.word	0x08003bd1
 8003ac4:	08003bd1 	.word	0x08003bd1
 8003ac8:	08003b8f 	.word	0x08003b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fa0e 	bl	8003ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0208 	orr.w	r2, r2, #8
 8003ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0204 	bic.w	r2, r2, #4
 8003af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6999      	ldr	r1, [r3, #24]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	619a      	str	r2, [r3, #24]
      break;
 8003b0a:	e064      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fa5e 	bl	8003fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6999      	ldr	r1, [r3, #24]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	619a      	str	r2, [r3, #24]
      break;
 8003b4c:	e043      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fab3 	bl	80040c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0208 	orr.w	r2, r2, #8
 8003b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0204 	bic.w	r2, r2, #4
 8003b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69d9      	ldr	r1, [r3, #28]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	61da      	str	r2, [r3, #28]
      break;
 8003b8c:	e023      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fb07 	bl	80041a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69d9      	ldr	r1, [r3, #28]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	021a      	lsls	r2, r3, #8
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	61da      	str	r2, [r3, #28]
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIM_ConfigClockSource+0x1c>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0b4      	b.n	8003d6e <HAL_TIM_ConfigClockSource+0x186>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3c:	d03e      	beq.n	8003cbc <HAL_TIM_ConfigClockSource+0xd4>
 8003c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c42:	f200 8087 	bhi.w	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4a:	f000 8086 	beq.w	8003d5a <HAL_TIM_ConfigClockSource+0x172>
 8003c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c52:	d87f      	bhi.n	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c54:	2b70      	cmp	r3, #112	; 0x70
 8003c56:	d01a      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0xa6>
 8003c58:	2b70      	cmp	r3, #112	; 0x70
 8003c5a:	d87b      	bhi.n	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c5c:	2b60      	cmp	r3, #96	; 0x60
 8003c5e:	d050      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0x11a>
 8003c60:	2b60      	cmp	r3, #96	; 0x60
 8003c62:	d877      	bhi.n	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c64:	2b50      	cmp	r3, #80	; 0x50
 8003c66:	d03c      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8003c68:	2b50      	cmp	r3, #80	; 0x50
 8003c6a:	d873      	bhi.n	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d058      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x13a>
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d86f      	bhi.n	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b30      	cmp	r3, #48	; 0x30
 8003c76:	d064      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x15a>
 8003c78:	2b30      	cmp	r3, #48	; 0x30
 8003c7a:	d86b      	bhi.n	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d060      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x15a>
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d867      	bhi.n	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d05c      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x15a>
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d05a      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x15a>
 8003c8c:	e062      	b.n	8003d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6899      	ldr	r1, [r3, #8]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f000 fc7d 	bl	800459c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	609a      	str	r2, [r3, #8]
      break;
 8003cba:	e04f      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	6899      	ldr	r1, [r3, #8]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f000 fc66 	bl	800459c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cde:	609a      	str	r2, [r3, #8]
      break;
 8003ce0:	e03c      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f000 fb24 	bl	800433c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2150      	movs	r1, #80	; 0x50
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fc33 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8003d00:	e02c      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6859      	ldr	r1, [r3, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f000 fb80 	bl	8004414 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2160      	movs	r1, #96	; 0x60
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fc23 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8003d20:	e01c      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f000 fb04 	bl	800433c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2140      	movs	r1, #64	; 0x40
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fc13 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8003d40:	e00c      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f000 fc0a 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8003d52:	e003      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      break;
 8003d58:	e000      	b.n	8003d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <TIM_Base_SetConfig+0x114>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd2:	d00f      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3d      	ldr	r2, [pc, #244]	; (8003ecc <TIM_Base_SetConfig+0x118>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00b      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3c      	ldr	r2, [pc, #240]	; (8003ed0 <TIM_Base_SetConfig+0x11c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d007      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3b      	ldr	r2, [pc, #236]	; (8003ed4 <TIM_Base_SetConfig+0x120>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3a      	ldr	r2, [pc, #232]	; (8003ed8 <TIM_Base_SetConfig+0x124>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d108      	bne.n	8003e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <TIM_Base_SetConfig+0x114>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d02b      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d027      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2c      	ldr	r2, [pc, #176]	; (8003ecc <TIM_Base_SetConfig+0x118>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d023      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2b      	ldr	r2, [pc, #172]	; (8003ed0 <TIM_Base_SetConfig+0x11c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01f      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <TIM_Base_SetConfig+0x120>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01b      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a29      	ldr	r2, [pc, #164]	; (8003ed8 <TIM_Base_SetConfig+0x124>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d017      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a28      	ldr	r2, [pc, #160]	; (8003edc <TIM_Base_SetConfig+0x128>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a27      	ldr	r2, [pc, #156]	; (8003ee0 <TIM_Base_SetConfig+0x12c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00f      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a26      	ldr	r2, [pc, #152]	; (8003ee4 <TIM_Base_SetConfig+0x130>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a25      	ldr	r2, [pc, #148]	; (8003ee8 <TIM_Base_SetConfig+0x134>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a24      	ldr	r2, [pc, #144]	; (8003eec <TIM_Base_SetConfig+0x138>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <TIM_Base_SetConfig+0x13c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <TIM_Base_SetConfig+0x114>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0xf8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <TIM_Base_SetConfig+0x124>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d103      	bne.n	8003eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	615a      	str	r2, [r3, #20]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	40010400 	.word	0x40010400
 8003edc:	40014000 	.word	0x40014000
 8003ee0:	40014400 	.word	0x40014400
 8003ee4:	40014800 	.word	0x40014800
 8003ee8:	40001800 	.word	0x40001800
 8003eec:	40001c00 	.word	0x40001c00
 8003ef0:	40002000 	.word	0x40002000

08003ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0303 	bic.w	r3, r3, #3
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 0302 	bic.w	r3, r3, #2
 8003f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a20      	ldr	r2, [pc, #128]	; (8003fcc <TIM_OC1_SetConfig+0xd8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_OC1_SetConfig+0x64>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <TIM_OC1_SetConfig+0xdc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d10c      	bne.n	8003f72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0308 	bic.w	r3, r3, #8
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <TIM_OC1_SetConfig+0xd8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_OC1_SetConfig+0x8e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <TIM_OC1_SetConfig+0xdc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d111      	bne.n	8003fa6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	621a      	str	r2, [r3, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40010400 	.word	0x40010400

08003fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0210 	bic.w	r2, r3, #16
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0320 	bic.w	r3, r3, #32
 800401e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <TIM_OC2_SetConfig+0xe4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_OC2_SetConfig+0x68>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a21      	ldr	r2, [pc, #132]	; (80040bc <TIM_OC2_SetConfig+0xe8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d10d      	bne.n	8004058 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004056:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <TIM_OC2_SetConfig+0xe4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_OC2_SetConfig+0x94>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <TIM_OC2_SetConfig+0xe8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d113      	bne.n	8004090 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800406e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40010400 	.word	0x40010400

080040c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <TIM_OC3_SetConfig+0xe0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d003      	beq.n	8004126 <TIM_OC3_SetConfig+0x66>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <TIM_OC3_SetConfig+0xe4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10d      	bne.n	8004142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800412c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <TIM_OC3_SetConfig+0xe0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_OC3_SetConfig+0x92>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <TIM_OC3_SetConfig+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d113      	bne.n	800417a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	621a      	str	r2, [r3, #32]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010400 	.word	0x40010400

080041a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	031b      	lsls	r3, r3, #12
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a12      	ldr	r2, [pc, #72]	; (800424c <TIM_OC4_SetConfig+0xa4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_OC4_SetConfig+0x68>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a11      	ldr	r2, [pc, #68]	; (8004250 <TIM_OC4_SetConfig+0xa8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d109      	bne.n	8004224 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40010400 	.word	0x40010400

08004254 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a28      	ldr	r2, [pc, #160]	; (8004320 <TIM_TI1_SetConfig+0xcc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01b      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004288:	d017      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <TIM_TI1_SetConfig+0xd0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a24      	ldr	r2, [pc, #144]	; (8004328 <TIM_TI1_SetConfig+0xd4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00f      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a23      	ldr	r2, [pc, #140]	; (800432c <TIM_TI1_SetConfig+0xd8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00b      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <TIM_TI1_SetConfig+0xdc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a21      	ldr	r2, [pc, #132]	; (8004334 <TIM_TI1_SetConfig+0xe0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_TI1_SetConfig+0x66>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a20      	ldr	r2, [pc, #128]	; (8004338 <TIM_TI1_SetConfig+0xe4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <TIM_TI1_SetConfig+0x6a>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <TIM_TI1_SetConfig+0x6c>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e003      	b.n	80042de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f023 030a 	bic.w	r3, r3, #10
 80042f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f003 030a 	and.w	r3, r3, #10
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40010400 	.word	0x40010400
 8004334:	40014000 	.word	0x40014000
 8004338:	40001800 	.word	0x40001800

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800439a:	b480      	push	{r7}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f023 0210 	bic.w	r2, r3, #16
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	b29b      	uxth	r3, r3
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f023 0210 	bic.w	r2, r3, #16
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800443e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	031b      	lsls	r3, r3, #12
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	621a      	str	r2, [r3, #32]
}
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 0303 	bic.w	r3, r3, #3
 80044a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80044c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004518:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800452a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	031b      	lsls	r3, r3, #12
 8004530:	b29b      	uxth	r3, r3
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800453e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	031b      	lsls	r3, r3, #12
 8004544:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	f043 0307 	orr.w	r3, r3, #7
 8004588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	021a      	lsls	r2, r3, #8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	431a      	orrs	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2201      	movs	r2, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	401a      	ands	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_TIMEx_PWMN_Start+0x24>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e022      	b.n	8004692 <HAL_TIMEx_PWMN_Start+0x6a>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b04      	cmp	r3, #4
 8004650:	d109      	bne.n	8004666 <HAL_TIMEx_PWMN_Start+0x3e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e015      	b.n	8004692 <HAL_TIMEx_PWMN_Start+0x6a>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d109      	bne.n	8004680 <HAL_TIMEx_PWMN_Start+0x58>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e008      	b.n	8004692 <HAL_TIMEx_PWMN_Start+0x6a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06d      	b.n	8004776 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_TIMEx_PWMN_Start+0x82>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a8:	e013      	b.n	80046d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d104      	bne.n	80046ba <HAL_TIMEx_PWMN_Start+0x92>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b8:	e00b      	b.n	80046d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d104      	bne.n	80046ca <HAL_TIMEx_PWMN_Start+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c8:	e003      	b.n	80046d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2204      	movs	r2, #4
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f99e 	bl	8004a1c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <HAL_TIMEx_PWMN_Start+0x158>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d022      	beq.n	8004740 <HAL_TIMEx_PWMN_Start+0x118>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d01d      	beq.n	8004740 <HAL_TIMEx_PWMN_Start+0x118>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <HAL_TIMEx_PWMN_Start+0x15c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d018      	beq.n	8004740 <HAL_TIMEx_PWMN_Start+0x118>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <HAL_TIMEx_PWMN_Start+0x160>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d013      	beq.n	8004740 <HAL_TIMEx_PWMN_Start+0x118>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1b      	ldr	r2, [pc, #108]	; (800478c <HAL_TIMEx_PWMN_Start+0x164>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00e      	beq.n	8004740 <HAL_TIMEx_PWMN_Start+0x118>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <HAL_TIMEx_PWMN_Start+0x168>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d009      	beq.n	8004740 <HAL_TIMEx_PWMN_Start+0x118>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_TIMEx_PWMN_Start+0x118>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <HAL_TIMEx_PWMN_Start+0x170>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d111      	bne.n	8004764 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b06      	cmp	r3, #6
 8004750:	d010      	beq.n	8004774 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004762:	e007      	b.n	8004774 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40010400 	.word	0x40010400
 8004794:	40014000 	.word	0x40014000
 8004798:	40001800 	.word	0x40001800

0800479c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f934 	bl	8004a1c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6a1a      	ldr	r2, [r3, #32]
 80047ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10f      	bne.n	80047e4 <HAL_TIMEx_PWMN_Stop+0x48>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	f240 4344 	movw	r3, #1092	; 0x444
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d107      	bne.n	80047e4 <HAL_TIMEx_PWMN_Stop+0x48>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10f      	bne.n	8004814 <HAL_TIMEx_PWMN_Stop+0x78>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	f240 4344 	movw	r3, #1092	; 0x444
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d107      	bne.n	8004814 <HAL_TIMEx_PWMN_Stop+0x78>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <HAL_TIMEx_PWMN_Stop+0x88>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004822:	e013      	b.n	800484c <HAL_TIMEx_PWMN_Stop+0xb0>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b04      	cmp	r3, #4
 8004828:	d104      	bne.n	8004834 <HAL_TIMEx_PWMN_Stop+0x98>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004832:	e00b      	b.n	800484c <HAL_TIMEx_PWMN_Stop+0xb0>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b08      	cmp	r3, #8
 8004838:	d104      	bne.n	8004844 <HAL_TIMEx_PWMN_Stop+0xa8>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004842:	e003      	b.n	800484c <HAL_TIMEx_PWMN_Stop+0xb0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800486c:	2302      	movs	r3, #2
 800486e:	e05a      	b.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a21      	ldr	r2, [pc, #132]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048bc:	d01d      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1b      	ldr	r2, [pc, #108]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a18      	ldr	r2, [pc, #96]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10c      	bne.n	8004914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	4313      	orrs	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40010000 	.word	0x40010000
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40010400 	.word	0x40010400
 8004948:	40014000 	.word	0x40014000
 800494c:	40001800 	.word	0x40001800

08004950 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004968:	2302      	movs	r3, #2
 800496a:	e03d      	b.n	80049e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2204      	movs	r2, #4
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a1a      	ldr	r2, [r3, #32]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e03f      	b.n	8004af8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fc feb7 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2224      	movs	r2, #36	; 0x24
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f928 	bl	8004d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004abe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ace:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ade:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08a      	sub	sp, #40	; 0x28
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d17c      	bne.n	8004c1a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_UART_Transmit+0x2c>
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e075      	b.n	8004c1c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Transmit+0x3e>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e06e      	b.n	8004c1c <HAL_UART_Transmit+0x11c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2221      	movs	r2, #33	; 0x21
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b54:	f7fd f896 	bl	8001c84 <HAL_GetTick>
 8004b58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6e:	d108      	bne.n	8004b82 <HAL_UART_Transmit+0x82>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	e003      	b.n	8004b8a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b92:	e02a      	b.n	8004bea <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2180      	movs	r1, #128	; 0x80
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f840 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e036      	b.n	8004c1c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	e007      	b.n	8004bdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	781a      	ldrb	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1cf      	bne.n	8004b94 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2140      	movs	r1, #64	; 0x40
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f810 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e006      	b.n	8004c1c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e000      	b.n	8004c1c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
  }
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b090      	sub	sp, #64	; 0x40
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e050      	b.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d04c      	beq.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c44:	f7fd f81e 	bl	8001c84 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d241      	bcs.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	330c      	adds	r3, #12
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c74:	637a      	str	r2, [r7, #52]	; 0x34
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e5      	bne.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3314      	adds	r3, #20
 8004c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	613b      	str	r3, [r7, #16]
   return(result);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3314      	adds	r3, #20
 8004ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca8:	623a      	str	r2, [r7, #32]
 8004caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e00f      	b.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d09f      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3740      	adds	r7, #64	; 0x40
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d04:	b0c0      	sub	sp, #256	; 0x100
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	68d9      	ldr	r1, [r3, #12]
 8004d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	ea40 0301 	orr.w	r3, r0, r1
 8004d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d58:	f021 010c 	bic.w	r1, r1, #12
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d66:	430b      	orrs	r3, r1
 8004d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7a:	6999      	ldr	r1, [r3, #24]
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	ea40 0301 	orr.w	r3, r0, r1
 8004d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b8f      	ldr	r3, [pc, #572]	; (8004fcc <UART_SetConfig+0x2cc>)
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d005      	beq.n	8004da0 <UART_SetConfig+0xa0>
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b8d      	ldr	r3, [pc, #564]	; (8004fd0 <UART_SetConfig+0x2d0>)
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d104      	bne.n	8004daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004da0:	f7fd fbac 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8004da4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004da8:	e003      	b.n	8004db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004daa:	f7fd fb93 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8004dae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	f040 810c 	bne.w	8004fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	1891      	adds	r1, r2, r2
 8004dd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dda:	415b      	adcs	r3, r3
 8004ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004de2:	4621      	mov	r1, r4
 8004de4:	eb12 0801 	adds.w	r8, r2, r1
 8004de8:	4629      	mov	r1, r5
 8004dea:	eb43 0901 	adc.w	r9, r3, r1
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e02:	4690      	mov	r8, r2
 8004e04:	4699      	mov	r9, r3
 8004e06:	4623      	mov	r3, r4
 8004e08:	eb18 0303 	adds.w	r3, r8, r3
 8004e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e10:	462b      	mov	r3, r5
 8004e12:	eb49 0303 	adc.w	r3, r9, r3
 8004e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e2e:	460b      	mov	r3, r1
 8004e30:	18db      	adds	r3, r3, r3
 8004e32:	653b      	str	r3, [r7, #80]	; 0x50
 8004e34:	4613      	mov	r3, r2
 8004e36:	eb42 0303 	adc.w	r3, r2, r3
 8004e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e44:	f7fb fe2a 	bl	8000a9c <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4b61      	ldr	r3, [pc, #388]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	011c      	lsls	r4, r3, #4
 8004e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e68:	4642      	mov	r2, r8
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	1891      	adds	r1, r2, r2
 8004e6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e70:	415b      	adcs	r3, r3
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e78:	4641      	mov	r1, r8
 8004e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e7e:	4649      	mov	r1, r9
 8004e80:	eb43 0b01 	adc.w	fp, r3, r1
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e98:	4692      	mov	sl, r2
 8004e9a:	469b      	mov	fp, r3
 8004e9c:	4643      	mov	r3, r8
 8004e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8004ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8004eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	18db      	adds	r3, r3, r3
 8004ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eca:	4613      	mov	r3, r2
 8004ecc:	eb42 0303 	adc.w	r3, r2, r3
 8004ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eda:	f7fb fddf 	bl	8000a9c <__aeabi_uldivmod>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2264      	movs	r2, #100	; 0x64
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	1acb      	subs	r3, r1, r3
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004efa:	4b36      	ldr	r3, [pc, #216]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004efc:	fba3 2302 	umull	r2, r3, r3, r2
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f08:	441c      	add	r4, r3
 8004f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	1891      	adds	r1, r2, r2
 8004f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f24:	415b      	adcs	r3, r3
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	1851      	adds	r1, r2, r1
 8004f30:	6339      	str	r1, [r7, #48]	; 0x30
 8004f32:	4649      	mov	r1, r9
 8004f34:	414b      	adcs	r3, r1
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f44:	4659      	mov	r1, fp
 8004f46:	00cb      	lsls	r3, r1, #3
 8004f48:	4651      	mov	r1, sl
 8004f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f4e:	4651      	mov	r1, sl
 8004f50:	00ca      	lsls	r2, r1, #3
 8004f52:	4610      	mov	r0, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	4642      	mov	r2, r8
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f60:	464b      	mov	r3, r9
 8004f62:	460a      	mov	r2, r1
 8004f64:	eb42 0303 	adc.w	r3, r2, r3
 8004f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f80:	460b      	mov	r3, r1
 8004f82:	18db      	adds	r3, r3, r3
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f86:	4613      	mov	r3, r2
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f96:	f7fb fd81 	bl	8000a9c <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	2164      	movs	r1, #100	; 0x64
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	3332      	adds	r3, #50	; 0x32
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <UART_SetConfig+0x2d4>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	f003 0207 	and.w	r2, r3, #7
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4422      	add	r2, r4
 8004fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fc8:	e105      	b.n	80051d6 <UART_SetConfig+0x4d6>
 8004fca:	bf00      	nop
 8004fcc:	40011000 	.word	0x40011000
 8004fd0:	40011400 	.word	0x40011400
 8004fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fea:	4642      	mov	r2, r8
 8004fec:	464b      	mov	r3, r9
 8004fee:	1891      	adds	r1, r2, r2
 8004ff0:	6239      	str	r1, [r7, #32]
 8004ff2:	415b      	adcs	r3, r3
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	1854      	adds	r4, r2, r1
 8004ffe:	4649      	mov	r1, r9
 8005000:	eb43 0501 	adc.w	r5, r3, r1
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	00eb      	lsls	r3, r5, #3
 800500e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005012:	00e2      	lsls	r2, r4, #3
 8005014:	4614      	mov	r4, r2
 8005016:	461d      	mov	r5, r3
 8005018:	4643      	mov	r3, r8
 800501a:	18e3      	adds	r3, r4, r3
 800501c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005020:	464b      	mov	r3, r9
 8005022:	eb45 0303 	adc.w	r3, r5, r3
 8005026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005046:	4629      	mov	r1, r5
 8005048:	008b      	lsls	r3, r1, #2
 800504a:	4621      	mov	r1, r4
 800504c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005050:	4621      	mov	r1, r4
 8005052:	008a      	lsls	r2, r1, #2
 8005054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005058:	f7fb fd20 	bl	8000a9c <__aeabi_uldivmod>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4b60      	ldr	r3, [pc, #384]	; (80051e4 <UART_SetConfig+0x4e4>)
 8005062:	fba3 2302 	umull	r2, r3, r3, r2
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	011c      	lsls	r4, r3, #4
 800506a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800506e:	2200      	movs	r2, #0
 8005070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005074:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800507c:	4642      	mov	r2, r8
 800507e:	464b      	mov	r3, r9
 8005080:	1891      	adds	r1, r2, r2
 8005082:	61b9      	str	r1, [r7, #24]
 8005084:	415b      	adcs	r3, r3
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800508c:	4641      	mov	r1, r8
 800508e:	1851      	adds	r1, r2, r1
 8005090:	6139      	str	r1, [r7, #16]
 8005092:	4649      	mov	r1, r9
 8005094:	414b      	adcs	r3, r1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a4:	4659      	mov	r1, fp
 80050a6:	00cb      	lsls	r3, r1, #3
 80050a8:	4651      	mov	r1, sl
 80050aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ae:	4651      	mov	r1, sl
 80050b0:	00ca      	lsls	r2, r1, #3
 80050b2:	4610      	mov	r0, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	4642      	mov	r2, r8
 80050ba:	189b      	adds	r3, r3, r2
 80050bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050c0:	464b      	mov	r3, r9
 80050c2:	460a      	mov	r2, r1
 80050c4:	eb42 0303 	adc.w	r3, r2, r3
 80050c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050e4:	4649      	mov	r1, r9
 80050e6:	008b      	lsls	r3, r1, #2
 80050e8:	4641      	mov	r1, r8
 80050ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ee:	4641      	mov	r1, r8
 80050f0:	008a      	lsls	r2, r1, #2
 80050f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050f6:	f7fb fcd1 	bl	8000a9c <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4b39      	ldr	r3, [pc, #228]	; (80051e4 <UART_SetConfig+0x4e4>)
 8005100:	fba3 1302 	umull	r1, r3, r3, r2
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	2164      	movs	r1, #100	; 0x64
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	3332      	adds	r3, #50	; 0x32
 8005112:	4a34      	ldr	r2, [pc, #208]	; (80051e4 <UART_SetConfig+0x4e4>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	095b      	lsrs	r3, r3, #5
 800511a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800511e:	441c      	add	r4, r3
 8005120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005124:	2200      	movs	r2, #0
 8005126:	673b      	str	r3, [r7, #112]	; 0x70
 8005128:	677a      	str	r2, [r7, #116]	; 0x74
 800512a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800512e:	4642      	mov	r2, r8
 8005130:	464b      	mov	r3, r9
 8005132:	1891      	adds	r1, r2, r2
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	415b      	adcs	r3, r3
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800513e:	4641      	mov	r1, r8
 8005140:	1851      	adds	r1, r2, r1
 8005142:	6039      	str	r1, [r7, #0]
 8005144:	4649      	mov	r1, r9
 8005146:	414b      	adcs	r3, r1
 8005148:	607b      	str	r3, [r7, #4]
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005156:	4659      	mov	r1, fp
 8005158:	00cb      	lsls	r3, r1, #3
 800515a:	4651      	mov	r1, sl
 800515c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005160:	4651      	mov	r1, sl
 8005162:	00ca      	lsls	r2, r1, #3
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	4603      	mov	r3, r0
 800516a:	4642      	mov	r2, r8
 800516c:	189b      	adds	r3, r3, r2
 800516e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005170:	464b      	mov	r3, r9
 8005172:	460a      	mov	r2, r1
 8005174:	eb42 0303 	adc.w	r3, r2, r3
 8005178:	66fb      	str	r3, [r7, #108]	; 0x6c
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	663b      	str	r3, [r7, #96]	; 0x60
 8005184:	667a      	str	r2, [r7, #100]	; 0x64
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005192:	4649      	mov	r1, r9
 8005194:	008b      	lsls	r3, r1, #2
 8005196:	4641      	mov	r1, r8
 8005198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519c:	4641      	mov	r1, r8
 800519e:	008a      	lsls	r2, r1, #2
 80051a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051a4:	f7fb fc7a 	bl	8000a9c <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <UART_SetConfig+0x4e4>)
 80051ae:	fba3 1302 	umull	r1, r3, r3, r2
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2164      	movs	r1, #100	; 0x64
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	3332      	adds	r3, #50	; 0x32
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <UART_SetConfig+0x4e4>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	f003 020f 	and.w	r2, r3, #15
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4422      	add	r2, r4
 80051d4:	609a      	str	r2, [r3, #8]
}
 80051d6:	bf00      	nop
 80051d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051dc:	46bd      	mov	sp, r7
 80051de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051e2:	bf00      	nop
 80051e4:	51eb851f 	.word	0x51eb851f

080051e8 <__NVIC_SetPriority>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	6039      	str	r1, [r7, #0]
 80051f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	db0a      	blt.n	8005212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	490c      	ldr	r1, [pc, #48]	; (8005234 <__NVIC_SetPriority+0x4c>)
 8005202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005206:	0112      	lsls	r2, r2, #4
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	440b      	add	r3, r1
 800520c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005210:	e00a      	b.n	8005228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4908      	ldr	r1, [pc, #32]	; (8005238 <__NVIC_SetPriority+0x50>)
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	3b04      	subs	r3, #4
 8005220:	0112      	lsls	r2, r2, #4
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	440b      	add	r3, r1
 8005226:	761a      	strb	r2, [r3, #24]
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	e000e100 	.word	0xe000e100
 8005238:	e000ed00 	.word	0xe000ed00

0800523c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005240:	2100      	movs	r1, #0
 8005242:	f06f 0004 	mvn.w	r0, #4
 8005246:	f7ff ffcf 	bl	80051e8 <__NVIC_SetPriority>
#endif
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005256:	f3ef 8305 	mrs	r3, IPSR
 800525a:	603b      	str	r3, [r7, #0]
  return(result);
 800525c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005262:	f06f 0305 	mvn.w	r3, #5
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	e00c      	b.n	8005284 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <osKernelInitialize+0x44>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d105      	bne.n	800527e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005272:	4b08      	ldr	r3, [pc, #32]	; (8005294 <osKernelInitialize+0x44>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005278:	2300      	movs	r3, #0
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	e002      	b.n	8005284 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800527e:	f04f 33ff 	mov.w	r3, #4294967295
 8005282:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005284:	687b      	ldr	r3, [r7, #4]
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20000240 	.word	0x20000240

08005298 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800529e:	f3ef 8305 	mrs	r3, IPSR
 80052a2:	603b      	str	r3, [r7, #0]
  return(result);
 80052a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80052aa:	f06f 0305 	mvn.w	r3, #5
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	e010      	b.n	80052d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <osKernelStart+0x48>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d109      	bne.n	80052ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80052ba:	f7ff ffbf 	bl	800523c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80052be:	4b08      	ldr	r3, [pc, #32]	; (80052e0 <osKernelStart+0x48>)
 80052c0:	2202      	movs	r2, #2
 80052c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80052c4:	f001 f866 	bl	8006394 <vTaskStartScheduler>
      stat = osOK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	e002      	b.n	80052d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295
 80052d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052d4:	687b      	ldr	r3, [r7, #4]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000240 	.word	0x20000240

080052e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af04      	add	r7, sp, #16
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f4:	f3ef 8305 	mrs	r3, IPSR
 80052f8:	617b      	str	r3, [r7, #20]
  return(result);
 80052fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d17e      	bne.n	80053fe <osThreadNew+0x11a>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d07b      	beq.n	80053fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800530a:	2318      	movs	r3, #24
 800530c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005312:	f04f 33ff 	mov.w	r3, #4294967295
 8005316:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d045      	beq.n	80053aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <osThreadNew+0x48>
        name = attr->name;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <osThreadNew+0x6e>
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b38      	cmp	r3, #56	; 0x38
 8005344:	d805      	bhi.n	8005352 <osThreadNew+0x6e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <osThreadNew+0x72>
        return (NULL);
 8005352:	2300      	movs	r3, #0
 8005354:	e054      	b.n	8005400 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	089b      	lsrs	r3, r3, #2
 8005364:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <osThreadNew+0xa8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b5b      	cmp	r3, #91	; 0x5b
 8005374:	d90a      	bls.n	800538c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800537a:	2b00      	cmp	r3, #0
 800537c:	d006      	beq.n	800538c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <osThreadNew+0xa8>
        mem = 1;
 8005386:	2301      	movs	r3, #1
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e010      	b.n	80053ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10c      	bne.n	80053ae <osThreadNew+0xca>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d108      	bne.n	80053ae <osThreadNew+0xca>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <osThreadNew+0xca>
          mem = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	e001      	b.n	80053ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d110      	bne.n	80053d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053bc:	9202      	str	r2, [sp, #8]
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6a3a      	ldr	r2, [r7, #32]
 80053c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fe0c 	bl	8005fe8 <xTaskCreateStatic>
 80053d0:	4603      	mov	r3, r0
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	e013      	b.n	80053fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d110      	bne.n	80053fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	b29a      	uxth	r2, r3
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 fe57 	bl	80060a2 <xTaskCreate>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d001      	beq.n	80053fe <osThreadNew+0x11a>
            hTask = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053fe:	693b      	ldr	r3, [r7, #16]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005410:	f3ef 8305 	mrs	r3, IPSR
 8005414:	60bb      	str	r3, [r7, #8]
  return(result);
 8005416:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <osDelay+0x1c>
    stat = osErrorISR;
 800541c:	f06f 0305 	mvn.w	r3, #5
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e007      	b.n	8005434 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <osDelay+0x2c>
      vTaskDelay(ticks);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 ff7c 	bl	800632c <vTaskDelay>
    }
  }

  return (stat);
 8005434:	68fb      	ldr	r3, [r7, #12]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4a07      	ldr	r2, [pc, #28]	; (800546c <vApplicationGetIdleTaskMemory+0x2c>)
 8005450:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4a06      	ldr	r2, [pc, #24]	; (8005470 <vApplicationGetIdleTaskMemory+0x30>)
 8005456:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2280      	movs	r2, #128	; 0x80
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000244 	.word	0x20000244
 8005470:	200002a0 	.word	0x200002a0

08005474 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005484:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a06      	ldr	r2, [pc, #24]	; (80054a4 <vApplicationGetTimerTaskMemory+0x30>)
 800548a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005492:	601a      	str	r2, [r3, #0]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	200004a0 	.word	0x200004a0
 80054a4:	200004fc 	.word	0x200004fc

080054a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f103 0208 	add.w	r2, r3, #8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295
 80054c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f103 0208 	add.w	r2, r3, #8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f103 0208 	add.w	r2, r3, #8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d103      	bne.n	800556a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e00c      	b.n	8005584 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3308      	adds	r3, #8
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e002      	b.n	8005578 <vListInsert+0x2e>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	d2f6      	bcs.n	8005572 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	601a      	str	r2, [r3, #0]
}
 80055b0:	bf00      	nop
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6892      	ldr	r2, [r2, #8]
 80055d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6852      	ldr	r2, [r2, #4]
 80055dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d103      	bne.n	80055f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	1e5a      	subs	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800563a:	f002 f84b 	bl	80076d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800564a:	fb01 f303 	mul.w	r3, r1, r3
 800564e:	441a      	add	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	3b01      	subs	r3, #1
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005670:	fb01 f303 	mul.w	r3, r1, r3
 8005674:	441a      	add	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	22ff      	movs	r2, #255	; 0xff
 800567e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	22ff      	movs	r2, #255	; 0xff
 8005686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d114      	bne.n	80056ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01a      	beq.n	80056ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3310      	adds	r3, #16
 800569c:	4618      	mov	r0, r3
 800569e:	f001 f903 	bl	80068a8 <xTaskRemoveFromEventList>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d012      	beq.n	80056ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <xQueueGenericReset+0xcc>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	e009      	b.n	80056ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3310      	adds	r3, #16
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fef2 	bl	80054a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3324      	adds	r3, #36	; 0x24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff feed 	bl	80054a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056ce:	f002 f831 	bl	8007734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056d2:	2301      	movs	r3, #1
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08e      	sub	sp, #56	; 0x38
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <xQueueGenericCreateStatic+0x52>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <xQueueGenericCreateStatic+0x56>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xQueueGenericCreateStatic+0x58>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	623b      	str	r3, [r7, #32]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <xQueueGenericCreateStatic+0x7e>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <xQueueGenericCreateStatic+0x82>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <xQueueGenericCreateStatic+0x84>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	61fb      	str	r3, [r7, #28]
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800577e:	2350      	movs	r3, #80	; 0x50
 8005780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b50      	cmp	r3, #80	; 0x50
 8005786:	d00a      	beq.n	800579e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	61bb      	str	r3, [r7, #24]
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800579e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	4613      	mov	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f805 	bl	80057d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3730      	adds	r7, #48	; 0x30
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d103      	bne.n	80057ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e002      	b.n	80057f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057fe:	2101      	movs	r1, #1
 8005800:	69b8      	ldr	r0, [r7, #24]
 8005802:	f7ff ff05 	bl	8005610 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08e      	sub	sp, #56	; 0x38
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005826:	2300      	movs	r3, #0
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xQueueGenericSend+0x32>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <xQueueGenericSend+0x40>
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <xQueueGenericSend+0x44>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <xQueueGenericSend+0x46>
 800585c:	2300      	movs	r3, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <xQueueGenericSend+0x60>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d103      	bne.n	8005886 <xQueueGenericSend+0x6e>
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <xQueueGenericSend+0x72>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <xQueueGenericSend+0x74>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	623b      	str	r3, [r7, #32]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058a6:	f001 f9bd 	bl	8006c24 <xTaskGetSchedulerState>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <xQueueGenericSend+0x9e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <xQueueGenericSend+0xa2>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <xQueueGenericSend+0xa4>
 80058ba:	2300      	movs	r3, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	61fb      	str	r3, [r7, #28]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058d6:	f001 fefd 	bl	80076d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <xQueueGenericSend+0xd4>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d129      	bne.n	8005940 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f2:	f000 fa0b 	bl	8005d0c <prvCopyDataToQueue>
 80058f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d010      	beq.n	8005922 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	3324      	adds	r3, #36	; 0x24
 8005904:	4618      	mov	r0, r3
 8005906:	f000 ffcf 	bl	80068a8 <xTaskRemoveFromEventList>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005910:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <xQueueGenericSend+0x1f8>)
 8005912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	e00a      	b.n	8005938 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005928:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <xQueueGenericSend+0x1f8>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005938:	f001 fefc 	bl	8007734 <vPortExitCritical>
				return pdPASS;
 800593c:	2301      	movs	r3, #1
 800593e:	e063      	b.n	8005a08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005946:	f001 fef5 	bl	8007734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800594a:	2300      	movs	r3, #0
 800594c:	e05c      	b.n	8005a08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005954:	f107 0314 	add.w	r3, r7, #20
 8005958:	4618      	mov	r0, r3
 800595a:	f001 f809 	bl	8006970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800595e:	2301      	movs	r3, #1
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005962:	f001 fee7 	bl	8007734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005966:	f000 fd7b 	bl	8006460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800596a:	f001 feb3 	bl	80076d4 <vPortEnterCritical>
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005974:	b25b      	sxtb	r3, r3
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d103      	bne.n	8005984 <xQueueGenericSend+0x16c>
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800598a:	b25b      	sxtb	r3, r3
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d103      	bne.n	800599a <xQueueGenericSend+0x182>
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599a:	f001 fecb 	bl	8007734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800599e:	1d3a      	adds	r2, r7, #4
 80059a0:	f107 0314 	add.w	r3, r7, #20
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fff8 	bl	800699c <xTaskCheckForTimeOut>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d124      	bne.n	80059fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b4:	f000 faa2 	bl	8005efc <prvIsQueueFull>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	3310      	adds	r3, #16
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 ff1e 	bl	8006808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ce:	f000 fa2d 	bl	8005e2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059d2:	f000 fd53 	bl	800647c <xTaskResumeAll>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f af7c 	bne.w	80058d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <xQueueGenericSend+0x1f8>)
 80059e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	e772      	b.n	80058d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f2:	f000 fa1b 	bl	8005e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059f6:	f000 fd41 	bl	800647c <xTaskResumeAll>
 80059fa:	e76c      	b.n	80058d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059fe:	f000 fa15 	bl	8005e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a02:	f000 fd3b 	bl	800647c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3738      	adds	r7, #56	; 0x38
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b090      	sub	sp, #64	; 0x40
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <xQueueGenericSendFromISR+0x3c>
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <xQueueGenericSendFromISR+0x40>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <xQueueGenericSendFromISR+0x42>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d103      	bne.n	8005a7e <xQueueGenericSendFromISR+0x6a>
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <xQueueGenericSendFromISR+0x6e>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <xQueueGenericSendFromISR+0x70>
 8005a82:	2300      	movs	r3, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	623b      	str	r3, [r7, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a9e:	f001 fefb 	bl	8007898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	61fa      	str	r2, [r7, #28]
 8005ab8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005aba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d302      	bcc.n	8005ad0 <xQueueGenericSendFromISR+0xbc>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d12f      	bne.n	8005b30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ae6:	f000 f911 	bl	8005d0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d112      	bne.n	8005b1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d016      	beq.n	8005b2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	3324      	adds	r3, #36	; 0x24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fed1 	bl	80068a8 <xTaskRemoveFromEventList>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e007      	b.n	8005b2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b1e:	3301      	adds	r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	b25a      	sxtb	r2, r3
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005b2e:	e001      	b.n	8005b34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3740      	adds	r7, #64	; 0x40
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08c      	sub	sp, #48	; 0x30
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <xQueueReceive+0x30>
	__asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	623b      	str	r3, [r7, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	e7fe      	b.n	8005b7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <xQueueReceive+0x3e>
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <xQueueReceive+0x42>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <xQueueReceive+0x44>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xQueueReceive+0x5e>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	61fb      	str	r3, [r7, #28]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005baa:	f001 f83b 	bl	8006c24 <xTaskGetSchedulerState>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <xQueueReceive+0x6e>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <xQueueReceive+0x72>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueReceive+0x74>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueReceive+0x8e>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	61bb      	str	r3, [r7, #24]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bda:	f001 fd7b 	bl	80076d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d01f      	beq.n	8005c2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bee:	f000 f8f7 	bl	8005de0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	1e5a      	subs	r2, r3, #1
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00f      	beq.n	8005c22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	3310      	adds	r3, #16
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fe4e 	bl	80068a8 <xTaskRemoveFromEventList>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c12:	4b3d      	ldr	r3, [pc, #244]	; (8005d08 <xQueueReceive+0x1bc>)
 8005c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c22:	f001 fd87 	bl	8007734 <vPortExitCritical>
				return pdPASS;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e069      	b.n	8005cfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c30:	f001 fd80 	bl	8007734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e062      	b.n	8005cfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c3e:	f107 0310 	add.w	r3, r7, #16
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fe94 	bl	8006970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c4c:	f001 fd72 	bl	8007734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c50:	f000 fc06 	bl	8006460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c54:	f001 fd3e 	bl	80076d4 <vPortEnterCritical>
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c5e:	b25b      	sxtb	r3, r3
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d103      	bne.n	8005c6e <xQueueReceive+0x122>
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c74:	b25b      	sxtb	r3, r3
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7a:	d103      	bne.n	8005c84 <xQueueReceive+0x138>
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c84:	f001 fd56 	bl	8007734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c88:	1d3a      	adds	r2, r7, #4
 8005c8a:	f107 0310 	add.w	r3, r7, #16
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fe83 	bl	800699c <xTaskCheckForTimeOut>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d123      	bne.n	8005ce4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9e:	f000 f917 	bl	8005ed0 <prvIsQueueEmpty>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d017      	beq.n	8005cd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	3324      	adds	r3, #36	; 0x24
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fda9 	bl	8006808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb8:	f000 f8b8 	bl	8005e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cbc:	f000 fbde 	bl	800647c <xTaskResumeAll>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d189      	bne.n	8005bda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <xQueueReceive+0x1bc>)
 8005cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	e780      	b.n	8005bda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cda:	f000 f8a7 	bl	8005e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cde:	f000 fbcd 	bl	800647c <xTaskResumeAll>
 8005ce2:	e77a      	b.n	8005bda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce6:	f000 f8a1 	bl	8005e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cea:	f000 fbc7 	bl	800647c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf0:	f000 f8ee 	bl	8005ed0 <prvIsQueueEmpty>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f43f af6f 	beq.w	8005bda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3730      	adds	r7, #48	; 0x30
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10d      	bne.n	8005d46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d14d      	bne.n	8005dce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 ff92 	bl	8006c60 <xTaskPriorityDisinherit>
 8005d3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	609a      	str	r2, [r3, #8]
 8005d44:	e043      	b.n	8005dce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d119      	bne.n	8005d80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6858      	ldr	r0, [r3, #4]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	461a      	mov	r2, r3
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	f001 fff2 	bl	8007d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	441a      	add	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d32b      	bcc.n	8005dce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	e026      	b.n	8005dce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68d8      	ldr	r0, [r3, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	461a      	mov	r2, r3
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	f001 ffd8 	bl	8007d40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	425b      	negs	r3, r3
 8005d9a:	441a      	add	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d207      	bcs.n	8005dbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	425b      	negs	r3, r3
 8005db6:	441a      	add	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d105      	bne.n	8005dce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005dd6:	697b      	ldr	r3, [r7, #20]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d018      	beq.n	8005e24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	441a      	add	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d303      	bcc.n	8005e14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68d9      	ldr	r1, [r3, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	6838      	ldr	r0, [r7, #0]
 8005e20:	f001 ff8e 	bl	8007d40 <memcpy>
	}
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e34:	f001 fc4e 	bl	80076d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e40:	e011      	b.n	8005e66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d012      	beq.n	8005e70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3324      	adds	r3, #36	; 0x24
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fd2a 	bl	80068a8 <xTaskRemoveFromEventList>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e5a:	f000 fe01 	bl	8006a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dce9      	bgt.n	8005e42 <prvUnlockQueue+0x16>
 8005e6e:	e000      	b.n	8005e72 <prvUnlockQueue+0x46>
					break;
 8005e70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	22ff      	movs	r2, #255	; 0xff
 8005e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e7a:	f001 fc5b 	bl	8007734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e7e:	f001 fc29 	bl	80076d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e8a:	e011      	b.n	8005eb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d012      	beq.n	8005eba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3310      	adds	r3, #16
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fd05 	bl	80068a8 <xTaskRemoveFromEventList>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ea4:	f000 fddc 	bl	8006a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dce9      	bgt.n	8005e8c <prvUnlockQueue+0x60>
 8005eb8:	e000      	b.n	8005ebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005eba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	22ff      	movs	r2, #255	; 0xff
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ec4:	f001 fc36 	bl	8007734 <vPortExitCritical>
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ed8:	f001 fbfc 	bl	80076d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e001      	b.n	8005eee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005eee:	f001 fc21 	bl	8007734 <vPortExitCritical>

	return xReturn;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f04:	f001 fbe6 	bl	80076d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d102      	bne.n	8005f1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f14:	2301      	movs	r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	e001      	b.n	8005f1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f1e:	f001 fc09 	bl	8007734 <vPortExitCritical>

	return xReturn;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e014      	b.n	8005f66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f3c:	4a0f      	ldr	r2, [pc, #60]	; (8005f7c <vQueueAddToRegistry+0x50>)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f48:	490c      	ldr	r1, [pc, #48]	; (8005f7c <vQueueAddToRegistry+0x50>)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f52:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <vQueueAddToRegistry+0x50>)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4413      	add	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f5e:	e006      	b.n	8005f6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b07      	cmp	r3, #7
 8005f6a:	d9e7      	bls.n	8005f3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f6c:	bf00      	nop
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	200008fc 	.word	0x200008fc

08005f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f90:	f001 fba0 	bl	80076d4 <vPortEnterCritical>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d103      	bne.n	8005faa <vQueueWaitForMessageRestricted+0x2a>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fb0:	b25b      	sxtb	r3, r3
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb6:	d103      	bne.n	8005fc0 <vQueueWaitForMessageRestricted+0x40>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fc0:	f001 fbb8 	bl	8007734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	3324      	adds	r3, #36	; 0x24
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fc3b 	bl	8006850 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f7ff ff26 	bl	8005e2c <prvUnlockQueue>
	}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08e      	sub	sp, #56	; 0x38
 8005fec:	af04      	add	r7, sp, #16
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	623b      	str	r3, [r7, #32]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <xTaskCreateStatic+0x46>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	61fb      	str	r3, [r7, #28]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800602e:	235c      	movs	r3, #92	; 0x5c
 8006030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b5c      	cmp	r3, #92	; 0x5c
 8006036:	d00a      	beq.n	800604e <xTaskCreateStatic+0x66>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	61bb      	str	r3, [r7, #24]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800604e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01e      	beq.n	8006094 <xTaskCreateStatic+0xac>
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01b      	beq.n	8006094 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006064:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	2202      	movs	r2, #2
 800606a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800606e:	2300      	movs	r3, #0
 8006070:	9303      	str	r3, [sp, #12]
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	9302      	str	r3, [sp, #8]
 8006076:	f107 0314 	add.w	r3, r7, #20
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f850 	bl	800612c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800608c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800608e:	f000 f8dd 	bl	800624c <prvAddNewTaskToReadyList>
 8006092:	e001      	b.n	8006098 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006098:	697b      	ldr	r3, [r7, #20]
	}
 800609a:	4618      	mov	r0, r3
 800609c:	3728      	adds	r7, #40	; 0x28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b08c      	sub	sp, #48	; 0x30
 80060a6:	af04      	add	r7, sp, #16
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f001 fc2e 	bl	8007918 <pvPortMalloc>
 80060bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00e      	beq.n	80060e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060c4:	205c      	movs	r0, #92	; 0x5c
 80060c6:	f001 fc27 	bl	8007918 <pvPortMalloc>
 80060ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
 80060d8:	e005      	b.n	80060e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f001 fce8 	bl	8007ab0 <vPortFree>
 80060e0:	e001      	b.n	80060e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d017      	beq.n	800611c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060f4:	88fa      	ldrh	r2, [r7, #6]
 80060f6:	2300      	movs	r3, #0
 80060f8:	9303      	str	r3, [sp, #12]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	9302      	str	r3, [sp, #8]
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f80e 	bl	800612c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006110:	69f8      	ldr	r0, [r7, #28]
 8006112:	f000 f89b 	bl	800624c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006116:	2301      	movs	r3, #1
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	e002      	b.n	8006122 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800611c:	f04f 33ff 	mov.w	r3, #4294967295
 8006120:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006122:	69bb      	ldr	r3, [r7, #24]
	}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	461a      	mov	r2, r3
 8006144:	21a5      	movs	r1, #165	; 0xa5
 8006146:	f001 fe09 	bl	8007d5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006154:	3b01      	subs	r3, #1
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	f023 0307 	bic.w	r3, r3, #7
 8006162:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <prvInitialiseNewTask+0x58>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	617b      	str	r3, [r7, #20]
}
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01f      	beq.n	80061ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	e012      	b.n	80061b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	7819      	ldrb	r1, [r3, #0]
 8006198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	3334      	adds	r3, #52	; 0x34
 80061a0:	460a      	mov	r2, r1
 80061a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d006      	beq.n	80061be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b0f      	cmp	r3, #15
 80061ba:	d9e9      	bls.n	8006190 <prvInitialiseNewTask+0x64>
 80061bc:	e000      	b.n	80061c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80061be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c8:	e003      	b.n	80061d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	2b37      	cmp	r3, #55	; 0x37
 80061d6:	d901      	bls.n	80061dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061d8:	2337      	movs	r3, #55	; 0x37
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	2200      	movs	r2, #0
 80061ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	3304      	adds	r3, #4
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff f978 	bl	80054e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	3318      	adds	r3, #24
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff f973 	bl	80054e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006206:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	2200      	movs	r2, #0
 800621c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	68f9      	ldr	r1, [r7, #12]
 800622a:	69b8      	ldr	r0, [r7, #24]
 800622c:	f001 f928 	bl	8007480 <pxPortInitialiseStack>
 8006230:	4602      	mov	r2, r0
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006240:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006242:	bf00      	nop
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006254:	f001 fa3e 	bl	80076d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <prvAddNewTaskToReadyList+0xc4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <prvAddNewTaskToReadyList+0xc4>)
 8006260:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006262:	4b2c      	ldr	r3, [pc, #176]	; (8006314 <prvAddNewTaskToReadyList+0xc8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800626a:	4a2a      	ldr	r2, [pc, #168]	; (8006314 <prvAddNewTaskToReadyList+0xc8>)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006270:	4b27      	ldr	r3, [pc, #156]	; (8006310 <prvAddNewTaskToReadyList+0xc4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d110      	bne.n	800629a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006278:	f000 fc16 	bl	8006aa8 <prvInitialiseTaskLists>
 800627c:	e00d      	b.n	800629a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800627e:	4b26      	ldr	r3, [pc, #152]	; (8006318 <prvAddNewTaskToReadyList+0xcc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006286:	4b23      	ldr	r3, [pc, #140]	; (8006314 <prvAddNewTaskToReadyList+0xc8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	429a      	cmp	r2, r3
 8006292:	d802      	bhi.n	800629a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006294:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <prvAddNewTaskToReadyList+0xc8>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800629a:	4b20      	ldr	r3, [pc, #128]	; (800631c <prvAddNewTaskToReadyList+0xd0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	4a1e      	ldr	r2, [pc, #120]	; (800631c <prvAddNewTaskToReadyList+0xd0>)
 80062a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062a4:	4b1d      	ldr	r3, [pc, #116]	; (800631c <prvAddNewTaskToReadyList+0xd0>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b0:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <prvAddNewTaskToReadyList+0xd4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d903      	bls.n	80062c0 <prvAddNewTaskToReadyList+0x74>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	4a18      	ldr	r2, [pc, #96]	; (8006320 <prvAddNewTaskToReadyList+0xd4>)
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4a15      	ldr	r2, [pc, #84]	; (8006324 <prvAddNewTaskToReadyList+0xd8>)
 80062ce:	441a      	add	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f7ff f913 	bl	8005502 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062dc:	f001 fa2a 	bl	8007734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <prvAddNewTaskToReadyList+0xcc>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00e      	beq.n	8006306 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062e8:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <prvAddNewTaskToReadyList+0xc8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d207      	bcs.n	8006306 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <prvAddNewTaskToReadyList+0xdc>)
 80062f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000e10 	.word	0x20000e10
 8006314:	2000093c 	.word	0x2000093c
 8006318:	20000e1c 	.word	0x20000e1c
 800631c:	20000e2c 	.word	0x20000e2c
 8006320:	20000e18 	.word	0x20000e18
 8006324:	20000940 	.word	0x20000940
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d017      	beq.n	800636e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800633e:	4b13      	ldr	r3, [pc, #76]	; (800638c <vTaskDelay+0x60>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <vTaskDelay+0x30>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60bb      	str	r3, [r7, #8]
}
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800635c:	f000 f880 	bl	8006460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006360:	2100      	movs	r1, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fcea 	bl	8006d3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006368:	f000 f888 	bl	800647c <xTaskResumeAll>
 800636c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d107      	bne.n	8006384 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006374:	4b06      	ldr	r3, [pc, #24]	; (8006390 <vTaskDelay+0x64>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006384:	bf00      	nop
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000e38 	.word	0x20000e38
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	; 0x28
 8006398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063a2:	463a      	mov	r2, r7
 80063a4:	1d39      	adds	r1, r7, #4
 80063a6:	f107 0308 	add.w	r3, r7, #8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff f848 	bl	8005440 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	9202      	str	r2, [sp, #8]
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	2300      	movs	r3, #0
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	2300      	movs	r3, #0
 80063c0:	460a      	mov	r2, r1
 80063c2:	4921      	ldr	r1, [pc, #132]	; (8006448 <vTaskStartScheduler+0xb4>)
 80063c4:	4821      	ldr	r0, [pc, #132]	; (800644c <vTaskStartScheduler+0xb8>)
 80063c6:	f7ff fe0f 	bl	8005fe8 <xTaskCreateStatic>
 80063ca:	4603      	mov	r3, r0
 80063cc:	4a20      	ldr	r2, [pc, #128]	; (8006450 <vTaskStartScheduler+0xbc>)
 80063ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063d0:	4b1f      	ldr	r3, [pc, #124]	; (8006450 <vTaskStartScheduler+0xbc>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063d8:	2301      	movs	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	e001      	b.n	80063e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d102      	bne.n	80063ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063e8:	f000 fcfc 	bl	8006de4 <xTimerCreateTimerTask>
 80063ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d116      	bne.n	8006422 <vTaskStartScheduler+0x8e>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	613b      	str	r3, [r7, #16]
}
 8006406:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006408:	4b12      	ldr	r3, [pc, #72]	; (8006454 <vTaskStartScheduler+0xc0>)
 800640a:	f04f 32ff 	mov.w	r2, #4294967295
 800640e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006410:	4b11      	ldr	r3, [pc, #68]	; (8006458 <vTaskStartScheduler+0xc4>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006416:	4b11      	ldr	r3, [pc, #68]	; (800645c <vTaskStartScheduler+0xc8>)
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800641c:	f001 f8b8 	bl	8007590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006420:	e00e      	b.n	8006440 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d10a      	bne.n	8006440 <vTaskStartScheduler+0xac>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	60fb      	str	r3, [r7, #12]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <vTaskStartScheduler+0xaa>
}
 8006440:	bf00      	nop
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	0800866c 	.word	0x0800866c
 800644c:	08006a79 	.word	0x08006a79
 8006450:	20000e34 	.word	0x20000e34
 8006454:	20000e30 	.word	0x20000e30
 8006458:	20000e1c 	.word	0x20000e1c
 800645c:	20000e14 	.word	0x20000e14

08006460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <vTaskSuspendAll+0x18>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	4a03      	ldr	r2, [pc, #12]	; (8006478 <vTaskSuspendAll+0x18>)
 800646c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800646e:	bf00      	nop
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	20000e38 	.word	0x20000e38

0800647c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800648a:	4b42      	ldr	r3, [pc, #264]	; (8006594 <xTaskResumeAll+0x118>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	603b      	str	r3, [r7, #0]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064a8:	f001 f914 	bl	80076d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064ac:	4b39      	ldr	r3, [pc, #228]	; (8006594 <xTaskResumeAll+0x118>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	4a38      	ldr	r2, [pc, #224]	; (8006594 <xTaskResumeAll+0x118>)
 80064b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064b6:	4b37      	ldr	r3, [pc, #220]	; (8006594 <xTaskResumeAll+0x118>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d162      	bne.n	8006584 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064be:	4b36      	ldr	r3, [pc, #216]	; (8006598 <xTaskResumeAll+0x11c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d05e      	beq.n	8006584 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064c6:	e02f      	b.n	8006528 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c8:	4b34      	ldr	r3, [pc, #208]	; (800659c <xTaskResumeAll+0x120>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3318      	adds	r3, #24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff f871 	bl	80055bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3304      	adds	r3, #4
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff f86c 	bl	80055bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e8:	4b2d      	ldr	r3, [pc, #180]	; (80065a0 <xTaskResumeAll+0x124>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d903      	bls.n	80064f8 <xTaskResumeAll+0x7c>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	4a2a      	ldr	r2, [pc, #168]	; (80065a0 <xTaskResumeAll+0x124>)
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <xTaskResumeAll+0x128>)
 8006506:	441a      	add	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f7fe fff7 	bl	8005502 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4b23      	ldr	r3, [pc, #140]	; (80065a8 <xTaskResumeAll+0x12c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006522:	4b22      	ldr	r3, [pc, #136]	; (80065ac <xTaskResumeAll+0x130>)
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006528:	4b1c      	ldr	r3, [pc, #112]	; (800659c <xTaskResumeAll+0x120>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1cb      	bne.n	80064c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006536:	f000 fb55 	bl	8006be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <xTaskResumeAll+0x134>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d010      	beq.n	8006568 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006546:	f000 f847 	bl	80065d8 <xTaskIncrementTick>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006550:	4b16      	ldr	r3, [pc, #88]	; (80065ac <xTaskResumeAll+0x130>)
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3b01      	subs	r3, #1
 800655a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f1      	bne.n	8006546 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <xTaskResumeAll+0x134>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006568:	4b10      	ldr	r3, [pc, #64]	; (80065ac <xTaskResumeAll+0x130>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d009      	beq.n	8006584 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006570:	2301      	movs	r3, #1
 8006572:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006574:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <xTaskResumeAll+0x138>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006584:	f001 f8d6 	bl	8007734 <vPortExitCritical>

	return xAlreadyYielded;
 8006588:	68bb      	ldr	r3, [r7, #8]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000e38 	.word	0x20000e38
 8006598:	20000e10 	.word	0x20000e10
 800659c:	20000dd0 	.word	0x20000dd0
 80065a0:	20000e18 	.word	0x20000e18
 80065a4:	20000940 	.word	0x20000940
 80065a8:	2000093c 	.word	0x2000093c
 80065ac:	20000e24 	.word	0x20000e24
 80065b0:	20000e20 	.word	0x20000e20
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <xTaskGetTickCount+0x1c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065c4:	687b      	ldr	r3, [r7, #4]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20000e14 	.word	0x20000e14

080065d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e2:	4b4f      	ldr	r3, [pc, #316]	; (8006720 <xTaskIncrementTick+0x148>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f040 808f 	bne.w	800670a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065ec:	4b4d      	ldr	r3, [pc, #308]	; (8006724 <xTaskIncrementTick+0x14c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065f4:	4a4b      	ldr	r2, [pc, #300]	; (8006724 <xTaskIncrementTick+0x14c>)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d120      	bne.n	8006642 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006600:	4b49      	ldr	r3, [pc, #292]	; (8006728 <xTaskIncrementTick+0x150>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <xTaskIncrementTick+0x48>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	603b      	str	r3, [r7, #0]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <xTaskIncrementTick+0x46>
 8006620:	4b41      	ldr	r3, [pc, #260]	; (8006728 <xTaskIncrementTick+0x150>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	4b41      	ldr	r3, [pc, #260]	; (800672c <xTaskIncrementTick+0x154>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a3f      	ldr	r2, [pc, #252]	; (8006728 <xTaskIncrementTick+0x150>)
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	4a3f      	ldr	r2, [pc, #252]	; (800672c <xTaskIncrementTick+0x154>)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	4b3e      	ldr	r3, [pc, #248]	; (8006730 <xTaskIncrementTick+0x158>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	4a3d      	ldr	r2, [pc, #244]	; (8006730 <xTaskIncrementTick+0x158>)
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	f000 fad1 	bl	8006be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006642:	4b3c      	ldr	r3, [pc, #240]	; (8006734 <xTaskIncrementTick+0x15c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	429a      	cmp	r2, r3
 800664a:	d349      	bcc.n	80066e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800664c:	4b36      	ldr	r3, [pc, #216]	; (8006728 <xTaskIncrementTick+0x150>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d104      	bne.n	8006660 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006656:	4b37      	ldr	r3, [pc, #220]	; (8006734 <xTaskIncrementTick+0x15c>)
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	601a      	str	r2, [r3, #0]
					break;
 800665e:	e03f      	b.n	80066e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006660:	4b31      	ldr	r3, [pc, #196]	; (8006728 <xTaskIncrementTick+0x150>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d203      	bcs.n	8006680 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006678:	4a2e      	ldr	r2, [pc, #184]	; (8006734 <xTaskIncrementTick+0x15c>)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800667e:	e02f      	b.n	80066e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3304      	adds	r3, #4
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe ff99 	bl	80055bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	3318      	adds	r3, #24
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe ff90 	bl	80055bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <xTaskIncrementTick+0x160>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d903      	bls.n	80066b0 <xTaskIncrementTick+0xd8>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	4a22      	ldr	r2, [pc, #136]	; (8006738 <xTaskIncrementTick+0x160>)
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4a1f      	ldr	r2, [pc, #124]	; (800673c <xTaskIncrementTick+0x164>)
 80066be:	441a      	add	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7fe ff1b 	bl	8005502 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d0:	4b1b      	ldr	r3, [pc, #108]	; (8006740 <xTaskIncrementTick+0x168>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3b8      	bcc.n	800664c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066da:	2301      	movs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066de:	e7b5      	b.n	800664c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066e0:	4b17      	ldr	r3, [pc, #92]	; (8006740 <xTaskIncrementTick+0x168>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4915      	ldr	r1, [pc, #84]	; (800673c <xTaskIncrementTick+0x164>)
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d901      	bls.n	80066fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066fc:	4b11      	ldr	r3, [pc, #68]	; (8006744 <xTaskIncrementTick+0x16c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006704:	2301      	movs	r3, #1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e004      	b.n	8006714 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800670a:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <xTaskIncrementTick+0x170>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3301      	adds	r3, #1
 8006710:	4a0d      	ldr	r2, [pc, #52]	; (8006748 <xTaskIncrementTick+0x170>)
 8006712:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006714:	697b      	ldr	r3, [r7, #20]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000e38 	.word	0x20000e38
 8006724:	20000e14 	.word	0x20000e14
 8006728:	20000dc8 	.word	0x20000dc8
 800672c:	20000dcc 	.word	0x20000dcc
 8006730:	20000e28 	.word	0x20000e28
 8006734:	20000e30 	.word	0x20000e30
 8006738:	20000e18 	.word	0x20000e18
 800673c:	20000940 	.word	0x20000940
 8006740:	2000093c 	.word	0x2000093c
 8006744:	20000e24 	.word	0x20000e24
 8006748:	20000e20 	.word	0x20000e20

0800674c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006752:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <vTaskSwitchContext+0xa8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800675a:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <vTaskSwitchContext+0xac>)
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006760:	e041      	b.n	80067e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006762:	4b25      	ldr	r3, [pc, #148]	; (80067f8 <vTaskSwitchContext+0xac>)
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006768:	4b24      	ldr	r3, [pc, #144]	; (80067fc <vTaskSwitchContext+0xb0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e010      	b.n	8006792 <vTaskSwitchContext+0x46>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <vTaskSwitchContext+0x40>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	607b      	str	r3, [r7, #4]
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <vTaskSwitchContext+0x3e>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3b01      	subs	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	491b      	ldr	r1, [pc, #108]	; (8006800 <vTaskSwitchContext+0xb4>)
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0e4      	beq.n	8006770 <vTaskSwitchContext+0x24>
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4a13      	ldr	r2, [pc, #76]	; (8006800 <vTaskSwitchContext+0xb4>)
 80067b2:	4413      	add	r3, r2
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	605a      	str	r2, [r3, #4]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	3308      	adds	r3, #8
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d104      	bne.n	80067d6 <vTaskSwitchContext+0x8a>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a09      	ldr	r2, [pc, #36]	; (8006804 <vTaskSwitchContext+0xb8>)
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	4a06      	ldr	r2, [pc, #24]	; (80067fc <vTaskSwitchContext+0xb0>)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6013      	str	r3, [r2, #0]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000e38 	.word	0x20000e38
 80067f8:	20000e24 	.word	0x20000e24
 80067fc:	20000e18 	.word	0x20000e18
 8006800:	20000940 	.word	0x20000940
 8006804:	2000093c 	.word	0x2000093c

08006808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60fb      	str	r3, [r7, #12]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <vTaskPlaceOnEventList+0x44>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3318      	adds	r3, #24
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fe fe87 	bl	800554a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800683c:	2101      	movs	r1, #1
 800683e:	6838      	ldr	r0, [r7, #0]
 8006840:	f000 fa7c 	bl	8006d3c <prvAddCurrentTaskToDelayedList>
}
 8006844:	bf00      	nop
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	2000093c 	.word	0x2000093c

08006850 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	617b      	str	r3, [r7, #20]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3318      	adds	r3, #24
 800687e:	4619      	mov	r1, r3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7fe fe3e 	bl	8005502 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800688c:	f04f 33ff 	mov.w	r3, #4294967295
 8006890:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	68b8      	ldr	r0, [r7, #8]
 8006896:	f000 fa51 	bl	8006d3c <prvAddCurrentTaskToDelayedList>
	}
 800689a:	bf00      	nop
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	2000093c 	.word	0x2000093c

080068a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10a      	bne.n	80068d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	60fb      	str	r3, [r7, #12]
}
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	3318      	adds	r3, #24
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe fe6f 	bl	80055bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068de:	4b1e      	ldr	r3, [pc, #120]	; (8006958 <xTaskRemoveFromEventList+0xb0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d11d      	bne.n	8006922 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3304      	adds	r3, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fe66 	bl	80055bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f4:	4b19      	ldr	r3, [pc, #100]	; (800695c <xTaskRemoveFromEventList+0xb4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d903      	bls.n	8006904 <xTaskRemoveFromEventList+0x5c>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4a16      	ldr	r2, [pc, #88]	; (800695c <xTaskRemoveFromEventList+0xb4>)
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a13      	ldr	r2, [pc, #76]	; (8006960 <xTaskRemoveFromEventList+0xb8>)
 8006912:	441a      	add	r2, r3
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f7fe fdf1 	bl	8005502 <vListInsertEnd>
 8006920:	e005      	b.n	800692e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3318      	adds	r3, #24
 8006926:	4619      	mov	r1, r3
 8006928:	480e      	ldr	r0, [pc, #56]	; (8006964 <xTaskRemoveFromEventList+0xbc>)
 800692a:	f7fe fdea 	bl	8005502 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006932:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <xTaskRemoveFromEventList+0xc0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	429a      	cmp	r2, r3
 800693a:	d905      	bls.n	8006948 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <xTaskRemoveFromEventList+0xc4>)
 8006942:	2201      	movs	r2, #1
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	e001      	b.n	800694c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800694c:	697b      	ldr	r3, [r7, #20]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000e38 	.word	0x20000e38
 800695c:	20000e18 	.word	0x20000e18
 8006960:	20000940 	.word	0x20000940
 8006964:	20000dd0 	.word	0x20000dd0
 8006968:	2000093c 	.word	0x2000093c
 800696c:	20000e24 	.word	0x20000e24

08006970 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006978:	4b06      	ldr	r3, [pc, #24]	; (8006994 <vTaskInternalSetTimeOutState+0x24>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <vTaskInternalSetTimeOutState+0x28>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	605a      	str	r2, [r3, #4]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20000e28 	.word	0x20000e28
 8006998:	20000e14 	.word	0x20000e14

0800699c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	613b      	str	r3, [r7, #16]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60fb      	str	r3, [r7, #12]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069de:	f000 fe79 	bl	80076d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069e2:	4b1d      	ldr	r3, [pc, #116]	; (8006a58 <xTaskCheckForTimeOut+0xbc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d102      	bne.n	8006a02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e023      	b.n	8006a4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b15      	ldr	r3, [pc, #84]	; (8006a5c <xTaskCheckForTimeOut+0xc0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d007      	beq.n	8006a1e <xTaskCheckForTimeOut+0x82>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d302      	bcc.n	8006a1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	e015      	b.n	8006a4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d20b      	bcs.n	8006a40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff9b 	bl	8006970 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	e004      	b.n	8006a4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a4a:	f000 fe73 	bl	8007734 <vPortExitCritical>

	return xReturn;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000e14 	.word	0x20000e14
 8006a5c:	20000e28 	.word	0x20000e28

08006a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a64:	4b03      	ldr	r3, [pc, #12]	; (8006a74 <vTaskMissedYield+0x14>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	20000e24 	.word	0x20000e24

08006a78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a80:	f000 f852 	bl	8006b28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <prvIdleTask+0x28>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d9f9      	bls.n	8006a80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a8c:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <prvIdleTask+0x2c>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a9c:	e7f0      	b.n	8006a80 <prvIdleTask+0x8>
 8006a9e:	bf00      	nop
 8006aa0:	20000940 	.word	0x20000940
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aae:	2300      	movs	r3, #0
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	e00c      	b.n	8006ace <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <prvInitialiseTaskLists+0x60>)
 8006ac0:	4413      	add	r3, r2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe fcf0 	bl	80054a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3301      	adds	r3, #1
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b37      	cmp	r3, #55	; 0x37
 8006ad2:	d9ef      	bls.n	8006ab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ad4:	480d      	ldr	r0, [pc, #52]	; (8006b0c <prvInitialiseTaskLists+0x64>)
 8006ad6:	f7fe fce7 	bl	80054a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ada:	480d      	ldr	r0, [pc, #52]	; (8006b10 <prvInitialiseTaskLists+0x68>)
 8006adc:	f7fe fce4 	bl	80054a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ae0:	480c      	ldr	r0, [pc, #48]	; (8006b14 <prvInitialiseTaskLists+0x6c>)
 8006ae2:	f7fe fce1 	bl	80054a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ae6:	480c      	ldr	r0, [pc, #48]	; (8006b18 <prvInitialiseTaskLists+0x70>)
 8006ae8:	f7fe fcde 	bl	80054a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006aec:	480b      	ldr	r0, [pc, #44]	; (8006b1c <prvInitialiseTaskLists+0x74>)
 8006aee:	f7fe fcdb 	bl	80054a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006af2:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <prvInitialiseTaskLists+0x78>)
 8006af4:	4a05      	ldr	r2, [pc, #20]	; (8006b0c <prvInitialiseTaskLists+0x64>)
 8006af6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <prvInitialiseTaskLists+0x7c>)
 8006afa:	4a05      	ldr	r2, [pc, #20]	; (8006b10 <prvInitialiseTaskLists+0x68>)
 8006afc:	601a      	str	r2, [r3, #0]
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000940 	.word	0x20000940
 8006b0c:	20000da0 	.word	0x20000da0
 8006b10:	20000db4 	.word	0x20000db4
 8006b14:	20000dd0 	.word	0x20000dd0
 8006b18:	20000de4 	.word	0x20000de4
 8006b1c:	20000dfc 	.word	0x20000dfc
 8006b20:	20000dc8 	.word	0x20000dc8
 8006b24:	20000dcc 	.word	0x20000dcc

08006b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b2e:	e019      	b.n	8006b64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b30:	f000 fdd0 	bl	80076d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b34:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <prvCheckTasksWaitingTermination+0x50>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe fd3b 	bl	80055bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <prvCheckTasksWaitingTermination+0x54>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	4a0b      	ldr	r2, [pc, #44]	; (8006b7c <prvCheckTasksWaitingTermination+0x54>)
 8006b4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b50:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <prvCheckTasksWaitingTermination+0x58>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <prvCheckTasksWaitingTermination+0x58>)
 8006b58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b5a:	f000 fdeb 	bl	8007734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f810 	bl	8006b84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <prvCheckTasksWaitingTermination+0x58>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e1      	bne.n	8006b30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000de4 	.word	0x20000de4
 8006b7c:	20000e10 	.word	0x20000e10
 8006b80:	20000df8 	.word	0x20000df8

08006b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d108      	bne.n	8006ba8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 ff88 	bl	8007ab0 <vPortFree>
				vPortFree( pxTCB );
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 ff85 	bl	8007ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ba6:	e018      	b.n	8006bda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d103      	bne.n	8006bba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 ff7c 	bl	8007ab0 <vPortFree>
	}
 8006bb8:	e00f      	b.n	8006bda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d00a      	beq.n	8006bda <prvDeleteTCB+0x56>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60fb      	str	r3, [r7, #12]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <prvDeleteTCB+0x54>
	}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <prvResetNextTaskUnblockTime+0x38>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <prvResetNextTaskUnblockTime+0x3c>)
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bfc:	e008      	b.n	8006c10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <prvResetNextTaskUnblockTime+0x38>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <prvResetNextTaskUnblockTime+0x3c>)
 8006c0e:	6013      	str	r3, [r2, #0]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000dc8 	.word	0x20000dc8
 8006c20:	20000e30 	.word	0x20000e30

08006c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c2a:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <xTaskGetSchedulerState+0x34>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c32:	2301      	movs	r3, #1
 8006c34:	607b      	str	r3, [r7, #4]
 8006c36:	e008      	b.n	8006c4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c38:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <xTaskGetSchedulerState+0x38>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c40:	2302      	movs	r3, #2
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e001      	b.n	8006c4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c4a:	687b      	ldr	r3, [r7, #4]
	}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000e1c 	.word	0x20000e1c
 8006c5c:	20000e38 	.word	0x20000e38

08006c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d056      	beq.n	8006d24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c76:	4b2e      	ldr	r3, [pc, #184]	; (8006d30 <xTaskPriorityDisinherit+0xd0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d00a      	beq.n	8006c96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	60fb      	str	r3, [r7, #12]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	60bb      	str	r3, [r7, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb8:	1e5a      	subs	r2, r3, #1
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d02c      	beq.n	8006d24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d128      	bne.n	8006d24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fc70 	bl	80055bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <xTaskPriorityDisinherit+0xd4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d903      	bls.n	8006d04 <xTaskPriorityDisinherit+0xa4>
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a0c      	ldr	r2, [pc, #48]	; (8006d34 <xTaskPriorityDisinherit+0xd4>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <xTaskPriorityDisinherit+0xd8>)
 8006d12:	441a      	add	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe fbf1 	bl	8005502 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d24:	697b      	ldr	r3, [r7, #20]
	}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	2000093c 	.word	0x2000093c
 8006d34:	20000e18 	.word	0x20000e18
 8006d38:	20000940 	.word	0x20000940

08006d3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d46:	4b21      	ldr	r3, [pc, #132]	; (8006dcc <prvAddCurrentTaskToDelayedList+0x90>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d4c:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fc32 	bl	80055bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d10a      	bne.n	8006d76 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d66:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4819      	ldr	r0, [pc, #100]	; (8006dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d70:	f7fe fbc7 	bl	8005502 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d74:	e026      	b.n	8006dc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d209      	bcs.n	8006da2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d8e:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	f7fe fbd5 	bl	800554a <vListInsert>
}
 8006da0:	e010      	b.n	8006dc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006da2:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7fe fbcb 	bl	800554a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d202      	bcs.n	8006dc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6013      	str	r3, [r2, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000e14 	.word	0x20000e14
 8006dd0:	2000093c 	.word	0x2000093c
 8006dd4:	20000dfc 	.word	0x20000dfc
 8006dd8:	20000dcc 	.word	0x20000dcc
 8006ddc:	20000dc8 	.word	0x20000dc8
 8006de0:	20000e30 	.word	0x20000e30

08006de4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006dee:	f000 fb07 	bl	8007400 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006df2:	4b1c      	ldr	r3, [pc, #112]	; (8006e64 <xTimerCreateTimerTask+0x80>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d021      	beq.n	8006e3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e02:	1d3a      	adds	r2, r7, #4
 8006e04:	f107 0108 	add.w	r1, r7, #8
 8006e08:	f107 030c 	add.w	r3, r7, #12
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fb31 	bl	8005474 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	9202      	str	r2, [sp, #8]
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	2300      	movs	r3, #0
 8006e22:	460a      	mov	r2, r1
 8006e24:	4910      	ldr	r1, [pc, #64]	; (8006e68 <xTimerCreateTimerTask+0x84>)
 8006e26:	4811      	ldr	r0, [pc, #68]	; (8006e6c <xTimerCreateTimerTask+0x88>)
 8006e28:	f7ff f8de 	bl	8005fe8 <xTaskCreateStatic>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <xTimerCreateTimerTask+0x8c>)
 8006e30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e32:	4b0f      	ldr	r3, [pc, #60]	; (8006e70 <xTimerCreateTimerTask+0x8c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	613b      	str	r3, [r7, #16]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e5a:	697b      	ldr	r3, [r7, #20]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000e6c 	.word	0x20000e6c
 8006e68:	08008674 	.word	0x08008674
 8006e6c:	08006fa9 	.word	0x08006fa9
 8006e70:	20000e70 	.word	0x20000e70

08006e74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	623b      	str	r3, [r7, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <xTimerGenericCommand+0x98>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d02a      	beq.n	8006f00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b05      	cmp	r3, #5
 8006eba:	dc18      	bgt.n	8006eee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ebc:	f7ff feb2 	bl	8006c24 <xTaskGetSchedulerState>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d109      	bne.n	8006eda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <xTimerGenericCommand+0x98>)
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	f107 0110 	add.w	r1, r7, #16
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed2:	f7fe fca1 	bl	8005818 <xQueueGenericSend>
 8006ed6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ed8:	e012      	b.n	8006f00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <xTimerGenericCommand+0x98>)
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	f107 0110 	add.w	r1, r7, #16
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f7fe fc97 	bl	8005818 <xQueueGenericSend>
 8006eea:	6278      	str	r0, [r7, #36]	; 0x24
 8006eec:	e008      	b.n	8006f00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <xTimerGenericCommand+0x98>)
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	f107 0110 	add.w	r1, r7, #16
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	f7fe fd8b 	bl	8005a14 <xQueueGenericSendFromISR>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3728      	adds	r7, #40	; 0x28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000e6c 	.word	0x20000e6c

08006f10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <prvProcessExpiredTimer+0x94>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fb47 	bl	80055bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d022      	beq.n	8006f82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	18d1      	adds	r1, r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	6978      	ldr	r0, [r7, #20]
 8006f4a:	f000 f8d1 	bl	80070f0 <prvInsertTimerInActiveList>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01f      	beq.n	8006f94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f54:	2300      	movs	r3, #0
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	6978      	ldr	r0, [r7, #20]
 8006f60:	f7ff ff88 	bl	8006e74 <xTimerGenericCommand>
 8006f64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d113      	bne.n	8006f94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60fb      	str	r3, [r7, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f88:	f023 0301 	bic.w	r3, r3, #1
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	6978      	ldr	r0, [r7, #20]
 8006f9a:	4798      	blx	r3
}
 8006f9c:	bf00      	nop
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000e64 	.word	0x20000e64

08006fa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fb0:	f107 0308 	add.w	r3, r7, #8
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f857 	bl	8007068 <prvGetNextExpireTime>
 8006fba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f803 	bl	8006fcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006fc6:	f000 f8d5 	bl	8007174 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fca:	e7f1      	b.n	8006fb0 <prvTimerTask+0x8>

08006fcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006fd6:	f7ff fa43 	bl	8006460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fda:	f107 0308 	add.w	r3, r7, #8
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f866 	bl	80070b0 <prvSampleTimeNow>
 8006fe4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d130      	bne.n	800704e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <prvProcessTimerOrBlockTask+0x3c>
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d806      	bhi.n	8007008 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ffa:	f7ff fa3f 	bl	800647c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ff85 	bl	8006f10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007006:	e024      	b.n	8007052 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d008      	beq.n	8007020 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <prvProcessTimerOrBlockTask+0x90>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <prvProcessTimerOrBlockTask+0x50>
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <prvProcessTimerOrBlockTask+0x52>
 800701c:	2300      	movs	r3, #0
 800701e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <prvProcessTimerOrBlockTask+0x94>)
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	4619      	mov	r1, r3
 800702e:	f7fe ffa7 	bl	8005f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007032:	f7ff fa23 	bl	800647c <xTaskResumeAll>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800703c:	4b09      	ldr	r3, [pc, #36]	; (8007064 <prvProcessTimerOrBlockTask+0x98>)
 800703e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	f3bf 8f6f 	isb	sy
}
 800704c:	e001      	b.n	8007052 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800704e:	f7ff fa15 	bl	800647c <xTaskResumeAll>
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000e68 	.word	0x20000e68
 8007060:	20000e6c 	.word	0x20000e6c
 8007064:	e000ed04 	.word	0xe000ed04

08007068 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007070:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <prvGetNextExpireTime+0x44>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <prvGetNextExpireTime+0x16>
 800707a:	2201      	movs	r2, #1
 800707c:	e000      	b.n	8007080 <prvGetNextExpireTime+0x18>
 800707e:	2200      	movs	r2, #0
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d105      	bne.n	8007098 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <prvGetNextExpireTime+0x44>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e001      	b.n	800709c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800709c:	68fb      	ldr	r3, [r7, #12]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000e64 	.word	0x20000e64

080070b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070b8:	f7ff fa7e 	bl	80065b8 <xTaskGetTickCount>
 80070bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070be:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <prvSampleTimeNow+0x3c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d205      	bcs.n	80070d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80070c8:	f000 f936 	bl	8007338 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e002      	b.n	80070da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070da:	4a04      	ldr	r2, [pc, #16]	; (80070ec <prvSampleTimeNow+0x3c>)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070e0:	68fb      	ldr	r3, [r7, #12]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000e74 	.word	0x20000e74

080070f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	429a      	cmp	r2, r3
 8007114:	d812      	bhi.n	800713c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	1ad2      	subs	r2, r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	429a      	cmp	r2, r3
 8007122:	d302      	bcc.n	800712a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007124:	2301      	movs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e01b      	b.n	8007162 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800712a:	4b10      	ldr	r3, [pc, #64]	; (800716c <prvInsertTimerInActiveList+0x7c>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3304      	adds	r3, #4
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f7fe fa08 	bl	800554a <vListInsert>
 800713a:	e012      	b.n	8007162 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d206      	bcs.n	8007152 <prvInsertTimerInActiveList+0x62>
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d302      	bcc.n	8007152 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800714c:	2301      	movs	r3, #1
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e007      	b.n	8007162 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <prvInsertTimerInActiveList+0x80>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3304      	adds	r3, #4
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f7fe f9f4 	bl	800554a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007162:	697b      	ldr	r3, [r7, #20]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20000e68 	.word	0x20000e68
 8007170:	20000e64 	.word	0x20000e64

08007174 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08e      	sub	sp, #56	; 0x38
 8007178:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800717a:	e0ca      	b.n	8007312 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	da18      	bge.n	80071b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007182:	1d3b      	adds	r3, r7, #4
 8007184:	3304      	adds	r3, #4
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	61fb      	str	r3, [r7, #28]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071aa:	6850      	ldr	r0, [r2, #4]
 80071ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ae:	6892      	ldr	r2, [r2, #8]
 80071b0:	4611      	mov	r1, r2
 80071b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f2c0 80aa 	blt.w	8007310 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	3304      	adds	r3, #4
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe f9f5 	bl	80055bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071d2:	463b      	mov	r3, r7
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff ff6b 	bl	80070b0 <prvSampleTimeNow>
 80071da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b09      	cmp	r3, #9
 80071e0:	f200 8097 	bhi.w	8007312 <prvProcessReceivedCommands+0x19e>
 80071e4:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <prvProcessReceivedCommands+0x78>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007215 	.word	0x08007215
 80071f0:	08007215 	.word	0x08007215
 80071f4:	08007215 	.word	0x08007215
 80071f8:	08007289 	.word	0x08007289
 80071fc:	0800729d 	.word	0x0800729d
 8007200:	080072e7 	.word	0x080072e7
 8007204:	08007215 	.word	0x08007215
 8007208:	08007215 	.word	0x08007215
 800720c:	08007289 	.word	0x08007289
 8007210:	0800729d 	.word	0x0800729d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	18d1      	adds	r1, r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007234:	f7ff ff5c 	bl	80070f0 <prvInsertTimerInActiveList>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d069      	beq.n	8007312 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007244:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d05e      	beq.n	8007312 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	441a      	add	r2, r3
 800725c:	2300      	movs	r3, #0
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	2300      	movs	r3, #0
 8007262:	2100      	movs	r1, #0
 8007264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007266:	f7ff fe05 	bl	8006e74 <xTimerGenericCommand>
 800726a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d14f      	bne.n	8007312 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	61bb      	str	r3, [r7, #24]
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800728e:	f023 0301 	bic.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800729a:	e03a      	b.n	8007312 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	617b      	str	r3, [r7, #20]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	18d1      	adds	r1, r2, r3
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e0:	f7ff ff06 	bl	80070f0 <prvInsertTimerInActiveList>
					break;
 80072e4:	e015      	b.n	8007312 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d103      	bne.n	80072fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80072f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f6:	f000 fbdb 	bl	8007ab0 <vPortFree>
 80072fa:	e00a      	b.n	8007312 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007302:	f023 0301 	bic.w	r3, r3, #1
 8007306:	b2da      	uxtb	r2, r3
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800730e:	e000      	b.n	8007312 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007310:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <prvProcessReceivedCommands+0x1c0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	1d39      	adds	r1, r7, #4
 8007318:	2200      	movs	r2, #0
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fc16 	bl	8005b4c <xQueueReceive>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	f47f af2a 	bne.w	800717c <prvProcessReceivedCommands+0x8>
	}
}
 8007328:	bf00      	nop
 800732a:	bf00      	nop
 800732c:	3730      	adds	r7, #48	; 0x30
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000e6c 	.word	0x20000e6c

08007338 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800733e:	e048      	b.n	80073d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007340:	4b2d      	ldr	r3, [pc, #180]	; (80073f8 <prvSwitchTimerLists+0xc0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800734a:	4b2b      	ldr	r3, [pc, #172]	; (80073f8 <prvSwitchTimerLists+0xc0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3304      	adds	r3, #4
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe f92f 	bl	80055bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d02e      	beq.n	80073d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	429a      	cmp	r2, r3
 8007384:	d90e      	bls.n	80073a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007392:	4b19      	ldr	r3, [pc, #100]	; (80073f8 <prvSwitchTimerLists+0xc0>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3304      	adds	r3, #4
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f7fe f8d4 	bl	800554a <vListInsert>
 80073a2:	e016      	b.n	80073d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073a4:	2300      	movs	r3, #0
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	2300      	movs	r3, #0
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	2100      	movs	r1, #0
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fd60 	bl	8006e74 <xTimerGenericCommand>
 80073b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	603b      	str	r3, [r7, #0]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073d2:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <prvSwitchTimerLists+0xc0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1b1      	bne.n	8007340 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <prvSwitchTimerLists+0xc0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80073e2:	4b06      	ldr	r3, [pc, #24]	; (80073fc <prvSwitchTimerLists+0xc4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a04      	ldr	r2, [pc, #16]	; (80073f8 <prvSwitchTimerLists+0xc0>)
 80073e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80073ea:	4a04      	ldr	r2, [pc, #16]	; (80073fc <prvSwitchTimerLists+0xc4>)
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	6013      	str	r3, [r2, #0]
}
 80073f0:	bf00      	nop
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20000e64 	.word	0x20000e64
 80073fc:	20000e68 	.word	0x20000e68

08007400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007406:	f000 f965 	bl	80076d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800740a:	4b15      	ldr	r3, [pc, #84]	; (8007460 <prvCheckForValidListAndQueue+0x60>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d120      	bne.n	8007454 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007412:	4814      	ldr	r0, [pc, #80]	; (8007464 <prvCheckForValidListAndQueue+0x64>)
 8007414:	f7fe f848 	bl	80054a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007418:	4813      	ldr	r0, [pc, #76]	; (8007468 <prvCheckForValidListAndQueue+0x68>)
 800741a:	f7fe f845 	bl	80054a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <prvCheckForValidListAndQueue+0x6c>)
 8007420:	4a10      	ldr	r2, [pc, #64]	; (8007464 <prvCheckForValidListAndQueue+0x64>)
 8007422:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007424:	4b12      	ldr	r3, [pc, #72]	; (8007470 <prvCheckForValidListAndQueue+0x70>)
 8007426:	4a10      	ldr	r2, [pc, #64]	; (8007468 <prvCheckForValidListAndQueue+0x68>)
 8007428:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800742a:	2300      	movs	r3, #0
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	4b11      	ldr	r3, [pc, #68]	; (8007474 <prvCheckForValidListAndQueue+0x74>)
 8007430:	4a11      	ldr	r2, [pc, #68]	; (8007478 <prvCheckForValidListAndQueue+0x78>)
 8007432:	2110      	movs	r1, #16
 8007434:	200a      	movs	r0, #10
 8007436:	f7fe f953 	bl	80056e0 <xQueueGenericCreateStatic>
 800743a:	4603      	mov	r3, r0
 800743c:	4a08      	ldr	r2, [pc, #32]	; (8007460 <prvCheckForValidListAndQueue+0x60>)
 800743e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007440:	4b07      	ldr	r3, [pc, #28]	; (8007460 <prvCheckForValidListAndQueue+0x60>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007448:	4b05      	ldr	r3, [pc, #20]	; (8007460 <prvCheckForValidListAndQueue+0x60>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	490b      	ldr	r1, [pc, #44]	; (800747c <prvCheckForValidListAndQueue+0x7c>)
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fd6c 	bl	8005f2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007454:	f000 f96e 	bl	8007734 <vPortExitCritical>
}
 8007458:	bf00      	nop
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000e6c 	.word	0x20000e6c
 8007464:	20000e3c 	.word	0x20000e3c
 8007468:	20000e50 	.word	0x20000e50
 800746c:	20000e64 	.word	0x20000e64
 8007470:	20000e68 	.word	0x20000e68
 8007474:	20000f18 	.word	0x20000f18
 8007478:	20000e78 	.word	0x20000e78
 800747c:	0800867c 	.word	0x0800867c

08007480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3b04      	subs	r3, #4
 8007490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3b04      	subs	r3, #4
 800749e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f023 0201 	bic.w	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3b04      	subs	r3, #4
 80074ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074b0:	4a0c      	ldr	r2, [pc, #48]	; (80074e4 <pxPortInitialiseStack+0x64>)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3b14      	subs	r3, #20
 80074ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3b04      	subs	r3, #4
 80074c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f06f 0202 	mvn.w	r2, #2
 80074ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3b20      	subs	r3, #32
 80074d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074d6:	68fb      	ldr	r3, [r7, #12]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	080074e9 	.word	0x080074e9

080074e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <prvTaskExitError+0x54>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d00a      	beq.n	8007512 <prvTaskExitError+0x2a>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	60fb      	str	r3, [r7, #12]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <prvTaskExitError+0x28>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60bb      	str	r3, [r7, #8]
}
 8007524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007526:	bf00      	nop
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0fc      	beq.n	8007528 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800752e:	bf00      	nop
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	20000010 	.word	0x20000010

08007540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <pxCurrentTCBConst2>)
 8007542:	6819      	ldr	r1, [r3, #0]
 8007544:	6808      	ldr	r0, [r1, #0]
 8007546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754a:	f380 8809 	msr	PSP, r0
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f04f 0000 	mov.w	r0, #0
 8007556:	f380 8811 	msr	BASEPRI, r0
 800755a:	4770      	bx	lr
 800755c:	f3af 8000 	nop.w

08007560 <pxCurrentTCBConst2>:
 8007560:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop

08007568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007568:	4808      	ldr	r0, [pc, #32]	; (800758c <prvPortStartFirstTask+0x24>)
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f380 8808 	msr	MSP, r0
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8814 	msr	CONTROL, r0
 800757a:	b662      	cpsie	i
 800757c:	b661      	cpsie	f
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	df00      	svc	0
 8007588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800758a:	bf00      	nop
 800758c:	e000ed08 	.word	0xe000ed08

08007590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007596:	4b46      	ldr	r3, [pc, #280]	; (80076b0 <xPortStartScheduler+0x120>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a46      	ldr	r2, [pc, #280]	; (80076b4 <xPortStartScheduler+0x124>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10a      	bne.n	80075b6 <xPortStartScheduler+0x26>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	613b      	str	r3, [r7, #16]
}
 80075b2:	bf00      	nop
 80075b4:	e7fe      	b.n	80075b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075b6:	4b3e      	ldr	r3, [pc, #248]	; (80076b0 <xPortStartScheduler+0x120>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a3f      	ldr	r2, [pc, #252]	; (80076b8 <xPortStartScheduler+0x128>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10a      	bne.n	80075d6 <xPortStartScheduler+0x46>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	60fb      	str	r3, [r7, #12]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075d6:	4b39      	ldr	r3, [pc, #228]	; (80076bc <xPortStartScheduler+0x12c>)
 80075d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	22ff      	movs	r2, #255	; 0xff
 80075e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <xPortStartScheduler+0x130>)
 80075fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075fe:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <xPortStartScheduler+0x134>)
 8007600:	2207      	movs	r2, #7
 8007602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007604:	e009      	b.n	800761a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007606:	4b2f      	ldr	r3, [pc, #188]	; (80076c4 <xPortStartScheduler+0x134>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3b01      	subs	r3, #1
 800760c:	4a2d      	ldr	r2, [pc, #180]	; (80076c4 <xPortStartScheduler+0x134>)
 800760e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	b2db      	uxtb	r3, r3
 8007618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007622:	2b80      	cmp	r3, #128	; 0x80
 8007624:	d0ef      	beq.n	8007606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007626:	4b27      	ldr	r3, [pc, #156]	; (80076c4 <xPortStartScheduler+0x134>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1c3 0307 	rsb	r3, r3, #7
 800762e:	2b04      	cmp	r3, #4
 8007630:	d00a      	beq.n	8007648 <xPortStartScheduler+0xb8>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60bb      	str	r3, [r7, #8]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007648:	4b1e      	ldr	r3, [pc, #120]	; (80076c4 <xPortStartScheduler+0x134>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <xPortStartScheduler+0x134>)
 8007650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007652:	4b1c      	ldr	r3, [pc, #112]	; (80076c4 <xPortStartScheduler+0x134>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800765a:	4a1a      	ldr	r2, [pc, #104]	; (80076c4 <xPortStartScheduler+0x134>)
 800765c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	b2da      	uxtb	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007666:	4b18      	ldr	r3, [pc, #96]	; (80076c8 <xPortStartScheduler+0x138>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <xPortStartScheduler+0x138>)
 800766c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <xPortStartScheduler+0x138>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <xPortStartScheduler+0x138>)
 8007678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800767c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800767e:	f000 f8dd 	bl	800783c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007682:	4b12      	ldr	r3, [pc, #72]	; (80076cc <xPortStartScheduler+0x13c>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007688:	f000 f8fc 	bl	8007884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800768c:	4b10      	ldr	r3, [pc, #64]	; (80076d0 <xPortStartScheduler+0x140>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a0f      	ldr	r2, [pc, #60]	; (80076d0 <xPortStartScheduler+0x140>)
 8007692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007698:	f7ff ff66 	bl	8007568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800769c:	f7ff f856 	bl	800674c <vTaskSwitchContext>
	prvTaskExitError();
 80076a0:	f7ff ff22 	bl	80074e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	e000ed00 	.word	0xe000ed00
 80076b4:	410fc271 	.word	0x410fc271
 80076b8:	410fc270 	.word	0x410fc270
 80076bc:	e000e400 	.word	0xe000e400
 80076c0:	20000f68 	.word	0x20000f68
 80076c4:	20000f6c 	.word	0x20000f6c
 80076c8:	e000ed20 	.word	0xe000ed20
 80076cc:	20000010 	.word	0x20000010
 80076d0:	e000ef34 	.word	0xe000ef34

080076d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	607b      	str	r3, [r7, #4]
}
 80076ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <vPortEnterCritical+0x58>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a0d      	ldr	r2, [pc, #52]	; (800772c <vPortEnterCritical+0x58>)
 80076f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076f8:	4b0c      	ldr	r3, [pc, #48]	; (800772c <vPortEnterCritical+0x58>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d10f      	bne.n	8007720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <vPortEnterCritical+0x5c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <vPortEnterCritical+0x4c>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	603b      	str	r3, [r7, #0]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <vPortEnterCritical+0x4a>
	}
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20000010 	.word	0x20000010
 8007730:	e000ed04 	.word	0xe000ed04

08007734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800773a:	4b12      	ldr	r3, [pc, #72]	; (8007784 <vPortExitCritical+0x50>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10a      	bne.n	8007758 <vPortExitCritical+0x24>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	607b      	str	r3, [r7, #4]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <vPortExitCritical+0x50>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3b01      	subs	r3, #1
 800775e:	4a09      	ldr	r2, [pc, #36]	; (8007784 <vPortExitCritical+0x50>)
 8007760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007762:	4b08      	ldr	r3, [pc, #32]	; (8007784 <vPortExitCritical+0x50>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d105      	bne.n	8007776 <vPortExitCritical+0x42>
 800776a:	2300      	movs	r3, #0
 800776c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	f383 8811 	msr	BASEPRI, r3
}
 8007774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000010 	.word	0x20000010
	...

08007790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007790:	f3ef 8009 	mrs	r0, PSP
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <pxCurrentTCBConst>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	f01e 0f10 	tst.w	lr, #16
 80077a0:	bf08      	it	eq
 80077a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	6010      	str	r0, [r2, #0]
 80077ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077b4:	f380 8811 	msr	BASEPRI, r0
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f7fe ffc4 	bl	800674c <vTaskSwitchContext>
 80077c4:	f04f 0000 	mov.w	r0, #0
 80077c8:	f380 8811 	msr	BASEPRI, r0
 80077cc:	bc09      	pop	{r0, r3}
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	6808      	ldr	r0, [r1, #0]
 80077d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d6:	f01e 0f10 	tst.w	lr, #16
 80077da:	bf08      	it	eq
 80077dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077e0:	f380 8809 	msr	PSP, r0
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst>:
 80077f0:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
}
 8007810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007812:	f7fe fee1 	bl	80065d8 <xTaskIncrementTick>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <xPortSysTickHandler+0x40>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f383 8811 	msr	BASEPRI, r3
}
 800782e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007846:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <vPortSetupTimerInterrupt+0x38>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <vPortSetupTimerInterrupt+0x3c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0a      	ldr	r2, [pc, #40]	; (800787c <vPortSetupTimerInterrupt+0x40>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	4a09      	ldr	r2, [pc, #36]	; (8007880 <vPortSetupTimerInterrupt+0x44>)
 800785a:	3b01      	subs	r3, #1
 800785c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800785e:	4b04      	ldr	r3, [pc, #16]	; (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
}
 8007864:	bf00      	nop
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	e000e010 	.word	0xe000e010
 8007874:	e000e018 	.word	0xe000e018
 8007878:	20000004 	.word	0x20000004
 800787c:	10624dd3 	.word	0x10624dd3
 8007880:	e000e014 	.word	0xe000e014

08007884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007894 <vPortEnableVFP+0x10>
 8007888:	6801      	ldr	r1, [r0, #0]
 800788a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800788e:	6001      	str	r1, [r0, #0]
 8007890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007892:	bf00      	nop
 8007894:	e000ed88 	.word	0xe000ed88

08007898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800789e:	f3ef 8305 	mrs	r3, IPSR
 80078a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b0f      	cmp	r3, #15
 80078a8:	d914      	bls.n	80078d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078aa:	4a17      	ldr	r2, [pc, #92]	; (8007908 <vPortValidateInterruptPriority+0x70>)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078b4:	4b15      	ldr	r3, [pc, #84]	; (800790c <vPortValidateInterruptPriority+0x74>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	7afa      	ldrb	r2, [r7, #11]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d20a      	bcs.n	80078d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	607b      	str	r3, [r7, #4]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078d4:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <vPortValidateInterruptPriority+0x78>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078dc:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <vPortValidateInterruptPriority+0x7c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d90a      	bls.n	80078fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	603b      	str	r3, [r7, #0]
}
 80078f6:	bf00      	nop
 80078f8:	e7fe      	b.n	80078f8 <vPortValidateInterruptPriority+0x60>
	}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	e000e3f0 	.word	0xe000e3f0
 800790c:	20000f68 	.word	0x20000f68
 8007910:	e000ed0c 	.word	0xe000ed0c
 8007914:	20000f6c 	.word	0x20000f6c

08007918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	; 0x28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007924:	f7fe fd9c 	bl	8006460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007928:	4b5b      	ldr	r3, [pc, #364]	; (8007a98 <pvPortMalloc+0x180>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007930:	f000 f920 	bl	8007b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007934:	4b59      	ldr	r3, [pc, #356]	; (8007a9c <pvPortMalloc+0x184>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 8093 	bne.w	8007a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01d      	beq.n	8007984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007948:	2208      	movs	r2, #8
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b00      	cmp	r3, #0
 8007958:	d014      	beq.n	8007984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f023 0307 	bic.w	r3, r3, #7
 8007960:	3308      	adds	r3, #8
 8007962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <pvPortMalloc+0x6c>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	617b      	str	r3, [r7, #20]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d06e      	beq.n	8007a68 <pvPortMalloc+0x150>
 800798a:	4b45      	ldr	r3, [pc, #276]	; (8007aa0 <pvPortMalloc+0x188>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d869      	bhi.n	8007a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007994:	4b43      	ldr	r3, [pc, #268]	; (8007aa4 <pvPortMalloc+0x18c>)
 8007996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007998:	4b42      	ldr	r3, [pc, #264]	; (8007aa4 <pvPortMalloc+0x18c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800799e:	e004      	b.n	80079aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d903      	bls.n	80079bc <pvPortMalloc+0xa4>
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f1      	bne.n	80079a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079bc:	4b36      	ldr	r3, [pc, #216]	; (8007a98 <pvPortMalloc+0x180>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d050      	beq.n	8007a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2208      	movs	r2, #8
 80079cc:	4413      	add	r3, r2
 80079ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	1ad2      	subs	r2, r2, r3
 80079e0:	2308      	movs	r3, #8
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d91f      	bls.n	8007a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <pvPortMalloc+0xf8>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	613b      	str	r3, [r7, #16]
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a22:	69b8      	ldr	r0, [r7, #24]
 8007a24:	f000 f908 	bl	8007c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <pvPortMalloc+0x188>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	4a1b      	ldr	r2, [pc, #108]	; (8007aa0 <pvPortMalloc+0x188>)
 8007a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a36:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <pvPortMalloc+0x188>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b1b      	ldr	r3, [pc, #108]	; (8007aa8 <pvPortMalloc+0x190>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d203      	bcs.n	8007a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a42:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <pvPortMalloc+0x188>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a18      	ldr	r2, [pc, #96]	; (8007aa8 <pvPortMalloc+0x190>)
 8007a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <pvPortMalloc+0x184>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <pvPortMalloc+0x194>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	4a11      	ldr	r2, [pc, #68]	; (8007aac <pvPortMalloc+0x194>)
 8007a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a68:	f7fe fd08 	bl	800647c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <pvPortMalloc+0x174>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60fb      	str	r3, [r7, #12]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <pvPortMalloc+0x172>
	return pvReturn;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3728      	adds	r7, #40	; 0x28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20004b78 	.word	0x20004b78
 8007a9c:	20004b8c 	.word	0x20004b8c
 8007aa0:	20004b7c 	.word	0x20004b7c
 8007aa4:	20004b70 	.word	0x20004b70
 8007aa8:	20004b80 	.word	0x20004b80
 8007aac:	20004b84 	.word	0x20004b84

08007ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d04d      	beq.n	8007b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	425b      	negs	r3, r3
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4413      	add	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <vPortFree+0xb8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <vPortFree+0x44>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	60fb      	str	r3, [r7, #12]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00a      	beq.n	8007b12 <vPortFree+0x62>
	__asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	60bb      	str	r3, [r7, #8]
}
 8007b0e:	bf00      	nop
 8007b10:	e7fe      	b.n	8007b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <vPortFree+0xb8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01e      	beq.n	8007b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d11a      	bne.n	8007b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <vPortFree+0xb8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	43db      	mvns	r3, r3
 8007b32:	401a      	ands	r2, r3
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b38:	f7fe fc92 	bl	8006460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <vPortFree+0xbc>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4413      	add	r3, r2
 8007b46:	4a09      	ldr	r2, [pc, #36]	; (8007b6c <vPortFree+0xbc>)
 8007b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b4a:	6938      	ldr	r0, [r7, #16]
 8007b4c:	f000 f874 	bl	8007c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <vPortFree+0xc0>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	4a06      	ldr	r2, [pc, #24]	; (8007b70 <vPortFree+0xc0>)
 8007b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b5a:	f7fe fc8f 	bl	800647c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b5e:	bf00      	nop
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20004b8c 	.word	0x20004b8c
 8007b6c:	20004b7c 	.word	0x20004b7c
 8007b70:	20004b88 	.word	0x20004b88

08007b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b80:	4b27      	ldr	r3, [pc, #156]	; (8007c20 <prvHeapInit+0xac>)
 8007b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00c      	beq.n	8007ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3307      	adds	r3, #7
 8007b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0307 	bic.w	r3, r3, #7
 8007b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	4a1f      	ldr	r2, [pc, #124]	; (8007c20 <prvHeapInit+0xac>)
 8007ba4:	4413      	add	r3, r2
 8007ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bac:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <prvHeapInit+0xb0>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bb2:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <prvHeapInit+0xb0>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0307 	bic.w	r3, r3, #7
 8007bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a15      	ldr	r2, [pc, #84]	; (8007c28 <prvHeapInit+0xb4>)
 8007bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bd6:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <prvHeapInit+0xb4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <prvHeapInit+0xb4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <prvHeapInit+0xb4>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <prvHeapInit+0xb8>)
 8007c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <prvHeapInit+0xbc>)
 8007c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c0c:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <prvHeapInit+0xc0>)
 8007c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000f70 	.word	0x20000f70
 8007c24:	20004b70 	.word	0x20004b70
 8007c28:	20004b78 	.word	0x20004b78
 8007c2c:	20004b80 	.word	0x20004b80
 8007c30:	20004b7c 	.word	0x20004b7c
 8007c34:	20004b8c 	.word	0x20004b8c

08007c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c40:	4b28      	ldr	r3, [pc, #160]	; (8007ce4 <prvInsertBlockIntoFreeList+0xac>)
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e002      	b.n	8007c4c <prvInsertBlockIntoFreeList+0x14>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d8f7      	bhi.n	8007c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	4413      	add	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d108      	bne.n	8007c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	441a      	add	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	441a      	add	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d118      	bne.n	8007cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d00d      	beq.n	8007cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	441a      	add	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	e008      	b.n	8007cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e003      	b.n	8007cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d002      	beq.n	8007cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20004b70 	.word	0x20004b70
 8007ce8:	20004b78 	.word	0x20004b78

08007cec <__errno>:
 8007cec:	4b01      	ldr	r3, [pc, #4]	; (8007cf4 <__errno+0x8>)
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000014 	.word	0x20000014

08007cf8 <__libc_init_array>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	4d0d      	ldr	r5, [pc, #52]	; (8007d30 <__libc_init_array+0x38>)
 8007cfc:	4c0d      	ldr	r4, [pc, #52]	; (8007d34 <__libc_init_array+0x3c>)
 8007cfe:	1b64      	subs	r4, r4, r5
 8007d00:	10a4      	asrs	r4, r4, #2
 8007d02:	2600      	movs	r6, #0
 8007d04:	42a6      	cmp	r6, r4
 8007d06:	d109      	bne.n	8007d1c <__libc_init_array+0x24>
 8007d08:	4d0b      	ldr	r5, [pc, #44]	; (8007d38 <__libc_init_array+0x40>)
 8007d0a:	4c0c      	ldr	r4, [pc, #48]	; (8007d3c <__libc_init_array+0x44>)
 8007d0c:	f000 fc8e 	bl	800862c <_init>
 8007d10:	1b64      	subs	r4, r4, r5
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	2600      	movs	r6, #0
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	d105      	bne.n	8007d26 <__libc_init_array+0x2e>
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d20:	4798      	blx	r3
 8007d22:	3601      	adds	r6, #1
 8007d24:	e7ee      	b.n	8007d04 <__libc_init_array+0xc>
 8007d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2a:	4798      	blx	r3
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	e7f2      	b.n	8007d16 <__libc_init_array+0x1e>
 8007d30:	08008720 	.word	0x08008720
 8007d34:	08008720 	.word	0x08008720
 8007d38:	08008720 	.word	0x08008720
 8007d3c:	08008724 	.word	0x08008724

08007d40 <memcpy>:
 8007d40:	440a      	add	r2, r1
 8007d42:	4291      	cmp	r1, r2
 8007d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d48:	d100      	bne.n	8007d4c <memcpy+0xc>
 8007d4a:	4770      	bx	lr
 8007d4c:	b510      	push	{r4, lr}
 8007d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d56:	4291      	cmp	r1, r2
 8007d58:	d1f9      	bne.n	8007d4e <memcpy+0xe>
 8007d5a:	bd10      	pop	{r4, pc}

08007d5c <memset>:
 8007d5c:	4402      	add	r2, r0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d100      	bne.n	8007d66 <memset+0xa>
 8007d64:	4770      	bx	lr
 8007d66:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6a:	e7f9      	b.n	8007d60 <memset+0x4>

08007d6c <siprintf>:
 8007d6c:	b40e      	push	{r1, r2, r3}
 8007d6e:	b500      	push	{lr}
 8007d70:	b09c      	sub	sp, #112	; 0x70
 8007d72:	ab1d      	add	r3, sp, #116	; 0x74
 8007d74:	9002      	str	r0, [sp, #8]
 8007d76:	9006      	str	r0, [sp, #24]
 8007d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d7c:	4809      	ldr	r0, [pc, #36]	; (8007da4 <siprintf+0x38>)
 8007d7e:	9107      	str	r1, [sp, #28]
 8007d80:	9104      	str	r1, [sp, #16]
 8007d82:	4909      	ldr	r1, [pc, #36]	; (8007da8 <siprintf+0x3c>)
 8007d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d88:	9105      	str	r1, [sp, #20]
 8007d8a:	6800      	ldr	r0, [r0, #0]
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	a902      	add	r1, sp, #8
 8007d90:	f000 f868 	bl	8007e64 <_svfiprintf_r>
 8007d94:	9b02      	ldr	r3, [sp, #8]
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	b01c      	add	sp, #112	; 0x70
 8007d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da0:	b003      	add	sp, #12
 8007da2:	4770      	bx	lr
 8007da4:	20000014 	.word	0x20000014
 8007da8:	ffff0208 	.word	0xffff0208

08007dac <__ssputs_r>:
 8007dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	688e      	ldr	r6, [r1, #8]
 8007db2:	429e      	cmp	r6, r3
 8007db4:	4682      	mov	sl, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	4690      	mov	r8, r2
 8007dba:	461f      	mov	r7, r3
 8007dbc:	d838      	bhi.n	8007e30 <__ssputs_r+0x84>
 8007dbe:	898a      	ldrh	r2, [r1, #12]
 8007dc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dc4:	d032      	beq.n	8007e2c <__ssputs_r+0x80>
 8007dc6:	6825      	ldr	r5, [r4, #0]
 8007dc8:	6909      	ldr	r1, [r1, #16]
 8007dca:	eba5 0901 	sub.w	r9, r5, r1
 8007dce:	6965      	ldr	r5, [r4, #20]
 8007dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dd8:	3301      	adds	r3, #1
 8007dda:	444b      	add	r3, r9
 8007ddc:	106d      	asrs	r5, r5, #1
 8007dde:	429d      	cmp	r5, r3
 8007de0:	bf38      	it	cc
 8007de2:	461d      	movcc	r5, r3
 8007de4:	0553      	lsls	r3, r2, #21
 8007de6:	d531      	bpl.n	8007e4c <__ssputs_r+0xa0>
 8007de8:	4629      	mov	r1, r5
 8007dea:	f000 fb55 	bl	8008498 <_malloc_r>
 8007dee:	4606      	mov	r6, r0
 8007df0:	b950      	cbnz	r0, 8007e08 <__ssputs_r+0x5c>
 8007df2:	230c      	movs	r3, #12
 8007df4:	f8ca 3000 	str.w	r3, [sl]
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e08:	6921      	ldr	r1, [r4, #16]
 8007e0a:	464a      	mov	r2, r9
 8007e0c:	f7ff ff98 	bl	8007d40 <memcpy>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	6126      	str	r6, [r4, #16]
 8007e1e:	6165      	str	r5, [r4, #20]
 8007e20:	444e      	add	r6, r9
 8007e22:	eba5 0509 	sub.w	r5, r5, r9
 8007e26:	6026      	str	r6, [r4, #0]
 8007e28:	60a5      	str	r5, [r4, #8]
 8007e2a:	463e      	mov	r6, r7
 8007e2c:	42be      	cmp	r6, r7
 8007e2e:	d900      	bls.n	8007e32 <__ssputs_r+0x86>
 8007e30:	463e      	mov	r6, r7
 8007e32:	6820      	ldr	r0, [r4, #0]
 8007e34:	4632      	mov	r2, r6
 8007e36:	4641      	mov	r1, r8
 8007e38:	f000 faa8 	bl	800838c <memmove>
 8007e3c:	68a3      	ldr	r3, [r4, #8]
 8007e3e:	1b9b      	subs	r3, r3, r6
 8007e40:	60a3      	str	r3, [r4, #8]
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	4433      	add	r3, r6
 8007e46:	6023      	str	r3, [r4, #0]
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e7db      	b.n	8007e04 <__ssputs_r+0x58>
 8007e4c:	462a      	mov	r2, r5
 8007e4e:	f000 fb97 	bl	8008580 <_realloc_r>
 8007e52:	4606      	mov	r6, r0
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d1e1      	bne.n	8007e1c <__ssputs_r+0x70>
 8007e58:	6921      	ldr	r1, [r4, #16]
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	f000 fab0 	bl	80083c0 <_free_r>
 8007e60:	e7c7      	b.n	8007df2 <__ssputs_r+0x46>
	...

08007e64 <_svfiprintf_r>:
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	4698      	mov	r8, r3
 8007e6a:	898b      	ldrh	r3, [r1, #12]
 8007e6c:	061b      	lsls	r3, r3, #24
 8007e6e:	b09d      	sub	sp, #116	; 0x74
 8007e70:	4607      	mov	r7, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	4614      	mov	r4, r2
 8007e76:	d50e      	bpl.n	8007e96 <_svfiprintf_r+0x32>
 8007e78:	690b      	ldr	r3, [r1, #16]
 8007e7a:	b963      	cbnz	r3, 8007e96 <_svfiprintf_r+0x32>
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	f000 fb0b 	bl	8008498 <_malloc_r>
 8007e82:	6028      	str	r0, [r5, #0]
 8007e84:	6128      	str	r0, [r5, #16]
 8007e86:	b920      	cbnz	r0, 8007e92 <_svfiprintf_r+0x2e>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e90:	e0d1      	b.n	8008036 <_svfiprintf_r+0x1d2>
 8007e92:	2340      	movs	r3, #64	; 0x40
 8007e94:	616b      	str	r3, [r5, #20]
 8007e96:	2300      	movs	r3, #0
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	2320      	movs	r3, #32
 8007e9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ea4:	2330      	movs	r3, #48	; 0x30
 8007ea6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008050 <_svfiprintf_r+0x1ec>
 8007eaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eae:	f04f 0901 	mov.w	r9, #1
 8007eb2:	4623      	mov	r3, r4
 8007eb4:	469a      	mov	sl, r3
 8007eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eba:	b10a      	cbz	r2, 8007ec0 <_svfiprintf_r+0x5c>
 8007ebc:	2a25      	cmp	r2, #37	; 0x25
 8007ebe:	d1f9      	bne.n	8007eb4 <_svfiprintf_r+0x50>
 8007ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec4:	d00b      	beq.n	8007ede <_svfiprintf_r+0x7a>
 8007ec6:	465b      	mov	r3, fp
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7ff ff6d 	bl	8007dac <__ssputs_r>
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f000 80aa 	beq.w	800802c <_svfiprintf_r+0x1c8>
 8007ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eda:	445a      	add	r2, fp
 8007edc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ede:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80a2 	beq.w	800802c <_svfiprintf_r+0x1c8>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295
 8007eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef2:	f10a 0a01 	add.w	sl, sl, #1
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	9307      	str	r3, [sp, #28]
 8007efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007efe:	931a      	str	r3, [sp, #104]	; 0x68
 8007f00:	4654      	mov	r4, sl
 8007f02:	2205      	movs	r2, #5
 8007f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f08:	4851      	ldr	r0, [pc, #324]	; (8008050 <_svfiprintf_r+0x1ec>)
 8007f0a:	f7f8 f981 	bl	8000210 <memchr>
 8007f0e:	9a04      	ldr	r2, [sp, #16]
 8007f10:	b9d8      	cbnz	r0, 8007f4a <_svfiprintf_r+0xe6>
 8007f12:	06d0      	lsls	r0, r2, #27
 8007f14:	bf44      	itt	mi
 8007f16:	2320      	movmi	r3, #32
 8007f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f1c:	0711      	lsls	r1, r2, #28
 8007f1e:	bf44      	itt	mi
 8007f20:	232b      	movmi	r3, #43	; 0x2b
 8007f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f26:	f89a 3000 	ldrb.w	r3, [sl]
 8007f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2c:	d015      	beq.n	8007f5a <_svfiprintf_r+0xf6>
 8007f2e:	9a07      	ldr	r2, [sp, #28]
 8007f30:	4654      	mov	r4, sl
 8007f32:	2000      	movs	r0, #0
 8007f34:	f04f 0c0a 	mov.w	ip, #10
 8007f38:	4621      	mov	r1, r4
 8007f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3e:	3b30      	subs	r3, #48	; 0x30
 8007f40:	2b09      	cmp	r3, #9
 8007f42:	d94e      	bls.n	8007fe2 <_svfiprintf_r+0x17e>
 8007f44:	b1b0      	cbz	r0, 8007f74 <_svfiprintf_r+0x110>
 8007f46:	9207      	str	r2, [sp, #28]
 8007f48:	e014      	b.n	8007f74 <_svfiprintf_r+0x110>
 8007f4a:	eba0 0308 	sub.w	r3, r0, r8
 8007f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f52:	4313      	orrs	r3, r2
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	46a2      	mov	sl, r4
 8007f58:	e7d2      	b.n	8007f00 <_svfiprintf_r+0x9c>
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	1d19      	adds	r1, r3, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	9103      	str	r1, [sp, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bfbb      	ittet	lt
 8007f66:	425b      	neglt	r3, r3
 8007f68:	f042 0202 	orrlt.w	r2, r2, #2
 8007f6c:	9307      	strge	r3, [sp, #28]
 8007f6e:	9307      	strlt	r3, [sp, #28]
 8007f70:	bfb8      	it	lt
 8007f72:	9204      	strlt	r2, [sp, #16]
 8007f74:	7823      	ldrb	r3, [r4, #0]
 8007f76:	2b2e      	cmp	r3, #46	; 0x2e
 8007f78:	d10c      	bne.n	8007f94 <_svfiprintf_r+0x130>
 8007f7a:	7863      	ldrb	r3, [r4, #1]
 8007f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7e:	d135      	bne.n	8007fec <_svfiprintf_r+0x188>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	9203      	str	r2, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfb8      	it	lt
 8007f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f90:	3402      	adds	r4, #2
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008060 <_svfiprintf_r+0x1fc>
 8007f98:	7821      	ldrb	r1, [r4, #0]
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	f7f8 f937 	bl	8000210 <memchr>
 8007fa2:	b140      	cbz	r0, 8007fb6 <_svfiprintf_r+0x152>
 8007fa4:	2340      	movs	r3, #64	; 0x40
 8007fa6:	eba0 000a 	sub.w	r0, r0, sl
 8007faa:	fa03 f000 	lsl.w	r0, r3, r0
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	4303      	orrs	r3, r0
 8007fb2:	3401      	adds	r4, #1
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fba:	4826      	ldr	r0, [pc, #152]	; (8008054 <_svfiprintf_r+0x1f0>)
 8007fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc0:	2206      	movs	r2, #6
 8007fc2:	f7f8 f925 	bl	8000210 <memchr>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d038      	beq.n	800803c <_svfiprintf_r+0x1d8>
 8007fca:	4b23      	ldr	r3, [pc, #140]	; (8008058 <_svfiprintf_r+0x1f4>)
 8007fcc:	bb1b      	cbnz	r3, 8008016 <_svfiprintf_r+0x1b2>
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	3307      	adds	r3, #7
 8007fd2:	f023 0307 	bic.w	r3, r3, #7
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fdc:	4433      	add	r3, r6
 8007fde:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe0:	e767      	b.n	8007eb2 <_svfiprintf_r+0x4e>
 8007fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	2001      	movs	r0, #1
 8007fea:	e7a5      	b.n	8007f38 <_svfiprintf_r+0xd4>
 8007fec:	2300      	movs	r3, #0
 8007fee:	3401      	adds	r4, #1
 8007ff0:	9305      	str	r3, [sp, #20]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f04f 0c0a 	mov.w	ip, #10
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ffe:	3a30      	subs	r2, #48	; 0x30
 8008000:	2a09      	cmp	r2, #9
 8008002:	d903      	bls.n	800800c <_svfiprintf_r+0x1a8>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0c5      	beq.n	8007f94 <_svfiprintf_r+0x130>
 8008008:	9105      	str	r1, [sp, #20]
 800800a:	e7c3      	b.n	8007f94 <_svfiprintf_r+0x130>
 800800c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008010:	4604      	mov	r4, r0
 8008012:	2301      	movs	r3, #1
 8008014:	e7f0      	b.n	8007ff8 <_svfiprintf_r+0x194>
 8008016:	ab03      	add	r3, sp, #12
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	462a      	mov	r2, r5
 800801c:	4b0f      	ldr	r3, [pc, #60]	; (800805c <_svfiprintf_r+0x1f8>)
 800801e:	a904      	add	r1, sp, #16
 8008020:	4638      	mov	r0, r7
 8008022:	f3af 8000 	nop.w
 8008026:	1c42      	adds	r2, r0, #1
 8008028:	4606      	mov	r6, r0
 800802a:	d1d6      	bne.n	8007fda <_svfiprintf_r+0x176>
 800802c:	89ab      	ldrh	r3, [r5, #12]
 800802e:	065b      	lsls	r3, r3, #25
 8008030:	f53f af2c 	bmi.w	8007e8c <_svfiprintf_r+0x28>
 8008034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008036:	b01d      	add	sp, #116	; 0x74
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	ab03      	add	r3, sp, #12
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	462a      	mov	r2, r5
 8008042:	4b06      	ldr	r3, [pc, #24]	; (800805c <_svfiprintf_r+0x1f8>)
 8008044:	a904      	add	r1, sp, #16
 8008046:	4638      	mov	r0, r7
 8008048:	f000 f87a 	bl	8008140 <_printf_i>
 800804c:	e7eb      	b.n	8008026 <_svfiprintf_r+0x1c2>
 800804e:	bf00      	nop
 8008050:	080086e4 	.word	0x080086e4
 8008054:	080086ee 	.word	0x080086ee
 8008058:	00000000 	.word	0x00000000
 800805c:	08007dad 	.word	0x08007dad
 8008060:	080086ea 	.word	0x080086ea

08008064 <_printf_common>:
 8008064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	4616      	mov	r6, r2
 800806a:	4699      	mov	r9, r3
 800806c:	688a      	ldr	r2, [r1, #8]
 800806e:	690b      	ldr	r3, [r1, #16]
 8008070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008074:	4293      	cmp	r3, r2
 8008076:	bfb8      	it	lt
 8008078:	4613      	movlt	r3, r2
 800807a:	6033      	str	r3, [r6, #0]
 800807c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008080:	4607      	mov	r7, r0
 8008082:	460c      	mov	r4, r1
 8008084:	b10a      	cbz	r2, 800808a <_printf_common+0x26>
 8008086:	3301      	adds	r3, #1
 8008088:	6033      	str	r3, [r6, #0]
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	0699      	lsls	r1, r3, #26
 800808e:	bf42      	ittt	mi
 8008090:	6833      	ldrmi	r3, [r6, #0]
 8008092:	3302      	addmi	r3, #2
 8008094:	6033      	strmi	r3, [r6, #0]
 8008096:	6825      	ldr	r5, [r4, #0]
 8008098:	f015 0506 	ands.w	r5, r5, #6
 800809c:	d106      	bne.n	80080ac <_printf_common+0x48>
 800809e:	f104 0a19 	add.w	sl, r4, #25
 80080a2:	68e3      	ldr	r3, [r4, #12]
 80080a4:	6832      	ldr	r2, [r6, #0]
 80080a6:	1a9b      	subs	r3, r3, r2
 80080a8:	42ab      	cmp	r3, r5
 80080aa:	dc26      	bgt.n	80080fa <_printf_common+0x96>
 80080ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080b0:	1e13      	subs	r3, r2, #0
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	bf18      	it	ne
 80080b6:	2301      	movne	r3, #1
 80080b8:	0692      	lsls	r2, r2, #26
 80080ba:	d42b      	bmi.n	8008114 <_printf_common+0xb0>
 80080bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080c0:	4649      	mov	r1, r9
 80080c2:	4638      	mov	r0, r7
 80080c4:	47c0      	blx	r8
 80080c6:	3001      	adds	r0, #1
 80080c8:	d01e      	beq.n	8008108 <_printf_common+0xa4>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	68e5      	ldr	r5, [r4, #12]
 80080ce:	6832      	ldr	r2, [r6, #0]
 80080d0:	f003 0306 	and.w	r3, r3, #6
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	bf08      	it	eq
 80080d8:	1aad      	subeq	r5, r5, r2
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	bf0c      	ite	eq
 80080e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e4:	2500      	movne	r5, #0
 80080e6:	4293      	cmp	r3, r2
 80080e8:	bfc4      	itt	gt
 80080ea:	1a9b      	subgt	r3, r3, r2
 80080ec:	18ed      	addgt	r5, r5, r3
 80080ee:	2600      	movs	r6, #0
 80080f0:	341a      	adds	r4, #26
 80080f2:	42b5      	cmp	r5, r6
 80080f4:	d11a      	bne.n	800812c <_printf_common+0xc8>
 80080f6:	2000      	movs	r0, #0
 80080f8:	e008      	b.n	800810c <_printf_common+0xa8>
 80080fa:	2301      	movs	r3, #1
 80080fc:	4652      	mov	r2, sl
 80080fe:	4649      	mov	r1, r9
 8008100:	4638      	mov	r0, r7
 8008102:	47c0      	blx	r8
 8008104:	3001      	adds	r0, #1
 8008106:	d103      	bne.n	8008110 <_printf_common+0xac>
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008110:	3501      	adds	r5, #1
 8008112:	e7c6      	b.n	80080a2 <_printf_common+0x3e>
 8008114:	18e1      	adds	r1, r4, r3
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	2030      	movs	r0, #48	; 0x30
 800811a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800811e:	4422      	add	r2, r4
 8008120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008128:	3302      	adds	r3, #2
 800812a:	e7c7      	b.n	80080bc <_printf_common+0x58>
 800812c:	2301      	movs	r3, #1
 800812e:	4622      	mov	r2, r4
 8008130:	4649      	mov	r1, r9
 8008132:	4638      	mov	r0, r7
 8008134:	47c0      	blx	r8
 8008136:	3001      	adds	r0, #1
 8008138:	d0e6      	beq.n	8008108 <_printf_common+0xa4>
 800813a:	3601      	adds	r6, #1
 800813c:	e7d9      	b.n	80080f2 <_printf_common+0x8e>
	...

08008140 <_printf_i>:
 8008140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	7e0f      	ldrb	r7, [r1, #24]
 8008146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008148:	2f78      	cmp	r7, #120	; 0x78
 800814a:	4691      	mov	r9, r2
 800814c:	4680      	mov	r8, r0
 800814e:	460c      	mov	r4, r1
 8008150:	469a      	mov	sl, r3
 8008152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008156:	d807      	bhi.n	8008168 <_printf_i+0x28>
 8008158:	2f62      	cmp	r7, #98	; 0x62
 800815a:	d80a      	bhi.n	8008172 <_printf_i+0x32>
 800815c:	2f00      	cmp	r7, #0
 800815e:	f000 80d8 	beq.w	8008312 <_printf_i+0x1d2>
 8008162:	2f58      	cmp	r7, #88	; 0x58
 8008164:	f000 80a3 	beq.w	80082ae <_printf_i+0x16e>
 8008168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800816c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008170:	e03a      	b.n	80081e8 <_printf_i+0xa8>
 8008172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008176:	2b15      	cmp	r3, #21
 8008178:	d8f6      	bhi.n	8008168 <_printf_i+0x28>
 800817a:	a101      	add	r1, pc, #4	; (adr r1, 8008180 <_printf_i+0x40>)
 800817c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008180:	080081d9 	.word	0x080081d9
 8008184:	080081ed 	.word	0x080081ed
 8008188:	08008169 	.word	0x08008169
 800818c:	08008169 	.word	0x08008169
 8008190:	08008169 	.word	0x08008169
 8008194:	08008169 	.word	0x08008169
 8008198:	080081ed 	.word	0x080081ed
 800819c:	08008169 	.word	0x08008169
 80081a0:	08008169 	.word	0x08008169
 80081a4:	08008169 	.word	0x08008169
 80081a8:	08008169 	.word	0x08008169
 80081ac:	080082f9 	.word	0x080082f9
 80081b0:	0800821d 	.word	0x0800821d
 80081b4:	080082db 	.word	0x080082db
 80081b8:	08008169 	.word	0x08008169
 80081bc:	08008169 	.word	0x08008169
 80081c0:	0800831b 	.word	0x0800831b
 80081c4:	08008169 	.word	0x08008169
 80081c8:	0800821d 	.word	0x0800821d
 80081cc:	08008169 	.word	0x08008169
 80081d0:	08008169 	.word	0x08008169
 80081d4:	080082e3 	.word	0x080082e3
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	602a      	str	r2, [r5, #0]
 80081e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081e8:	2301      	movs	r3, #1
 80081ea:	e0a3      	b.n	8008334 <_printf_i+0x1f4>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	6829      	ldr	r1, [r5, #0]
 80081f0:	0606      	lsls	r6, r0, #24
 80081f2:	f101 0304 	add.w	r3, r1, #4
 80081f6:	d50a      	bpl.n	800820e <_printf_i+0xce>
 80081f8:	680e      	ldr	r6, [r1, #0]
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	2e00      	cmp	r6, #0
 80081fe:	da03      	bge.n	8008208 <_printf_i+0xc8>
 8008200:	232d      	movs	r3, #45	; 0x2d
 8008202:	4276      	negs	r6, r6
 8008204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008208:	485e      	ldr	r0, [pc, #376]	; (8008384 <_printf_i+0x244>)
 800820a:	230a      	movs	r3, #10
 800820c:	e019      	b.n	8008242 <_printf_i+0x102>
 800820e:	680e      	ldr	r6, [r1, #0]
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008216:	bf18      	it	ne
 8008218:	b236      	sxthne	r6, r6
 800821a:	e7ef      	b.n	80081fc <_printf_i+0xbc>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	6820      	ldr	r0, [r4, #0]
 8008220:	1d19      	adds	r1, r3, #4
 8008222:	6029      	str	r1, [r5, #0]
 8008224:	0601      	lsls	r1, r0, #24
 8008226:	d501      	bpl.n	800822c <_printf_i+0xec>
 8008228:	681e      	ldr	r6, [r3, #0]
 800822a:	e002      	b.n	8008232 <_printf_i+0xf2>
 800822c:	0646      	lsls	r6, r0, #25
 800822e:	d5fb      	bpl.n	8008228 <_printf_i+0xe8>
 8008230:	881e      	ldrh	r6, [r3, #0]
 8008232:	4854      	ldr	r0, [pc, #336]	; (8008384 <_printf_i+0x244>)
 8008234:	2f6f      	cmp	r7, #111	; 0x6f
 8008236:	bf0c      	ite	eq
 8008238:	2308      	moveq	r3, #8
 800823a:	230a      	movne	r3, #10
 800823c:	2100      	movs	r1, #0
 800823e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008242:	6865      	ldr	r5, [r4, #4]
 8008244:	60a5      	str	r5, [r4, #8]
 8008246:	2d00      	cmp	r5, #0
 8008248:	bfa2      	ittt	ge
 800824a:	6821      	ldrge	r1, [r4, #0]
 800824c:	f021 0104 	bicge.w	r1, r1, #4
 8008250:	6021      	strge	r1, [r4, #0]
 8008252:	b90e      	cbnz	r6, 8008258 <_printf_i+0x118>
 8008254:	2d00      	cmp	r5, #0
 8008256:	d04d      	beq.n	80082f4 <_printf_i+0x1b4>
 8008258:	4615      	mov	r5, r2
 800825a:	fbb6 f1f3 	udiv	r1, r6, r3
 800825e:	fb03 6711 	mls	r7, r3, r1, r6
 8008262:	5dc7      	ldrb	r7, [r0, r7]
 8008264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008268:	4637      	mov	r7, r6
 800826a:	42bb      	cmp	r3, r7
 800826c:	460e      	mov	r6, r1
 800826e:	d9f4      	bls.n	800825a <_printf_i+0x11a>
 8008270:	2b08      	cmp	r3, #8
 8008272:	d10b      	bne.n	800828c <_printf_i+0x14c>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	07de      	lsls	r6, r3, #31
 8008278:	d508      	bpl.n	800828c <_printf_i+0x14c>
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	6861      	ldr	r1, [r4, #4]
 800827e:	4299      	cmp	r1, r3
 8008280:	bfde      	ittt	le
 8008282:	2330      	movle	r3, #48	; 0x30
 8008284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800828c:	1b52      	subs	r2, r2, r5
 800828e:	6122      	str	r2, [r4, #16]
 8008290:	f8cd a000 	str.w	sl, [sp]
 8008294:	464b      	mov	r3, r9
 8008296:	aa03      	add	r2, sp, #12
 8008298:	4621      	mov	r1, r4
 800829a:	4640      	mov	r0, r8
 800829c:	f7ff fee2 	bl	8008064 <_printf_common>
 80082a0:	3001      	adds	r0, #1
 80082a2:	d14c      	bne.n	800833e <_printf_i+0x1fe>
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	b004      	add	sp, #16
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	4835      	ldr	r0, [pc, #212]	; (8008384 <_printf_i+0x244>)
 80082b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082b4:	6829      	ldr	r1, [r5, #0]
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80082bc:	6029      	str	r1, [r5, #0]
 80082be:	061d      	lsls	r5, r3, #24
 80082c0:	d514      	bpl.n	80082ec <_printf_i+0x1ac>
 80082c2:	07df      	lsls	r7, r3, #31
 80082c4:	bf44      	itt	mi
 80082c6:	f043 0320 	orrmi.w	r3, r3, #32
 80082ca:	6023      	strmi	r3, [r4, #0]
 80082cc:	b91e      	cbnz	r6, 80082d6 <_printf_i+0x196>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	f023 0320 	bic.w	r3, r3, #32
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	2310      	movs	r3, #16
 80082d8:	e7b0      	b.n	800823c <_printf_i+0xfc>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f043 0320 	orr.w	r3, r3, #32
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	2378      	movs	r3, #120	; 0x78
 80082e4:	4828      	ldr	r0, [pc, #160]	; (8008388 <_printf_i+0x248>)
 80082e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082ea:	e7e3      	b.n	80082b4 <_printf_i+0x174>
 80082ec:	0659      	lsls	r1, r3, #25
 80082ee:	bf48      	it	mi
 80082f0:	b2b6      	uxthmi	r6, r6
 80082f2:	e7e6      	b.n	80082c2 <_printf_i+0x182>
 80082f4:	4615      	mov	r5, r2
 80082f6:	e7bb      	b.n	8008270 <_printf_i+0x130>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	6826      	ldr	r6, [r4, #0]
 80082fc:	6961      	ldr	r1, [r4, #20]
 80082fe:	1d18      	adds	r0, r3, #4
 8008300:	6028      	str	r0, [r5, #0]
 8008302:	0635      	lsls	r5, r6, #24
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	d501      	bpl.n	800830c <_printf_i+0x1cc>
 8008308:	6019      	str	r1, [r3, #0]
 800830a:	e002      	b.n	8008312 <_printf_i+0x1d2>
 800830c:	0670      	lsls	r0, r6, #25
 800830e:	d5fb      	bpl.n	8008308 <_printf_i+0x1c8>
 8008310:	8019      	strh	r1, [r3, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	4615      	mov	r5, r2
 8008318:	e7ba      	b.n	8008290 <_printf_i+0x150>
 800831a:	682b      	ldr	r3, [r5, #0]
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	602a      	str	r2, [r5, #0]
 8008320:	681d      	ldr	r5, [r3, #0]
 8008322:	6862      	ldr	r2, [r4, #4]
 8008324:	2100      	movs	r1, #0
 8008326:	4628      	mov	r0, r5
 8008328:	f7f7 ff72 	bl	8000210 <memchr>
 800832c:	b108      	cbz	r0, 8008332 <_printf_i+0x1f2>
 800832e:	1b40      	subs	r0, r0, r5
 8008330:	6060      	str	r0, [r4, #4]
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	6123      	str	r3, [r4, #16]
 8008336:	2300      	movs	r3, #0
 8008338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800833c:	e7a8      	b.n	8008290 <_printf_i+0x150>
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	462a      	mov	r2, r5
 8008342:	4649      	mov	r1, r9
 8008344:	4640      	mov	r0, r8
 8008346:	47d0      	blx	sl
 8008348:	3001      	adds	r0, #1
 800834a:	d0ab      	beq.n	80082a4 <_printf_i+0x164>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	079b      	lsls	r3, r3, #30
 8008350:	d413      	bmi.n	800837a <_printf_i+0x23a>
 8008352:	68e0      	ldr	r0, [r4, #12]
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	4298      	cmp	r0, r3
 8008358:	bfb8      	it	lt
 800835a:	4618      	movlt	r0, r3
 800835c:	e7a4      	b.n	80082a8 <_printf_i+0x168>
 800835e:	2301      	movs	r3, #1
 8008360:	4632      	mov	r2, r6
 8008362:	4649      	mov	r1, r9
 8008364:	4640      	mov	r0, r8
 8008366:	47d0      	blx	sl
 8008368:	3001      	adds	r0, #1
 800836a:	d09b      	beq.n	80082a4 <_printf_i+0x164>
 800836c:	3501      	adds	r5, #1
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	9903      	ldr	r1, [sp, #12]
 8008372:	1a5b      	subs	r3, r3, r1
 8008374:	42ab      	cmp	r3, r5
 8008376:	dcf2      	bgt.n	800835e <_printf_i+0x21e>
 8008378:	e7eb      	b.n	8008352 <_printf_i+0x212>
 800837a:	2500      	movs	r5, #0
 800837c:	f104 0619 	add.w	r6, r4, #25
 8008380:	e7f5      	b.n	800836e <_printf_i+0x22e>
 8008382:	bf00      	nop
 8008384:	080086f5 	.word	0x080086f5
 8008388:	08008706 	.word	0x08008706

0800838c <memmove>:
 800838c:	4288      	cmp	r0, r1
 800838e:	b510      	push	{r4, lr}
 8008390:	eb01 0402 	add.w	r4, r1, r2
 8008394:	d902      	bls.n	800839c <memmove+0x10>
 8008396:	4284      	cmp	r4, r0
 8008398:	4623      	mov	r3, r4
 800839a:	d807      	bhi.n	80083ac <memmove+0x20>
 800839c:	1e43      	subs	r3, r0, #1
 800839e:	42a1      	cmp	r1, r4
 80083a0:	d008      	beq.n	80083b4 <memmove+0x28>
 80083a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083aa:	e7f8      	b.n	800839e <memmove+0x12>
 80083ac:	4402      	add	r2, r0
 80083ae:	4601      	mov	r1, r0
 80083b0:	428a      	cmp	r2, r1
 80083b2:	d100      	bne.n	80083b6 <memmove+0x2a>
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083be:	e7f7      	b.n	80083b0 <memmove+0x24>

080083c0 <_free_r>:
 80083c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083c2:	2900      	cmp	r1, #0
 80083c4:	d044      	beq.n	8008450 <_free_r+0x90>
 80083c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ca:	9001      	str	r0, [sp, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f1a1 0404 	sub.w	r4, r1, #4
 80083d2:	bfb8      	it	lt
 80083d4:	18e4      	addlt	r4, r4, r3
 80083d6:	f000 f913 	bl	8008600 <__malloc_lock>
 80083da:	4a1e      	ldr	r2, [pc, #120]	; (8008454 <_free_r+0x94>)
 80083dc:	9801      	ldr	r0, [sp, #4]
 80083de:	6813      	ldr	r3, [r2, #0]
 80083e0:	b933      	cbnz	r3, 80083f0 <_free_r+0x30>
 80083e2:	6063      	str	r3, [r4, #4]
 80083e4:	6014      	str	r4, [r2, #0]
 80083e6:	b003      	add	sp, #12
 80083e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ec:	f000 b90e 	b.w	800860c <__malloc_unlock>
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d908      	bls.n	8008406 <_free_r+0x46>
 80083f4:	6825      	ldr	r5, [r4, #0]
 80083f6:	1961      	adds	r1, r4, r5
 80083f8:	428b      	cmp	r3, r1
 80083fa:	bf01      	itttt	eq
 80083fc:	6819      	ldreq	r1, [r3, #0]
 80083fe:	685b      	ldreq	r3, [r3, #4]
 8008400:	1949      	addeq	r1, r1, r5
 8008402:	6021      	streq	r1, [r4, #0]
 8008404:	e7ed      	b.n	80083e2 <_free_r+0x22>
 8008406:	461a      	mov	r2, r3
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	b10b      	cbz	r3, 8008410 <_free_r+0x50>
 800840c:	42a3      	cmp	r3, r4
 800840e:	d9fa      	bls.n	8008406 <_free_r+0x46>
 8008410:	6811      	ldr	r1, [r2, #0]
 8008412:	1855      	adds	r5, r2, r1
 8008414:	42a5      	cmp	r5, r4
 8008416:	d10b      	bne.n	8008430 <_free_r+0x70>
 8008418:	6824      	ldr	r4, [r4, #0]
 800841a:	4421      	add	r1, r4
 800841c:	1854      	adds	r4, r2, r1
 800841e:	42a3      	cmp	r3, r4
 8008420:	6011      	str	r1, [r2, #0]
 8008422:	d1e0      	bne.n	80083e6 <_free_r+0x26>
 8008424:	681c      	ldr	r4, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	6053      	str	r3, [r2, #4]
 800842a:	4421      	add	r1, r4
 800842c:	6011      	str	r1, [r2, #0]
 800842e:	e7da      	b.n	80083e6 <_free_r+0x26>
 8008430:	d902      	bls.n	8008438 <_free_r+0x78>
 8008432:	230c      	movs	r3, #12
 8008434:	6003      	str	r3, [r0, #0]
 8008436:	e7d6      	b.n	80083e6 <_free_r+0x26>
 8008438:	6825      	ldr	r5, [r4, #0]
 800843a:	1961      	adds	r1, r4, r5
 800843c:	428b      	cmp	r3, r1
 800843e:	bf04      	itt	eq
 8008440:	6819      	ldreq	r1, [r3, #0]
 8008442:	685b      	ldreq	r3, [r3, #4]
 8008444:	6063      	str	r3, [r4, #4]
 8008446:	bf04      	itt	eq
 8008448:	1949      	addeq	r1, r1, r5
 800844a:	6021      	streq	r1, [r4, #0]
 800844c:	6054      	str	r4, [r2, #4]
 800844e:	e7ca      	b.n	80083e6 <_free_r+0x26>
 8008450:	b003      	add	sp, #12
 8008452:	bd30      	pop	{r4, r5, pc}
 8008454:	20004b90 	.word	0x20004b90

08008458 <sbrk_aligned>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	4e0e      	ldr	r6, [pc, #56]	; (8008494 <sbrk_aligned+0x3c>)
 800845c:	460c      	mov	r4, r1
 800845e:	6831      	ldr	r1, [r6, #0]
 8008460:	4605      	mov	r5, r0
 8008462:	b911      	cbnz	r1, 800846a <sbrk_aligned+0x12>
 8008464:	f000 f8bc 	bl	80085e0 <_sbrk_r>
 8008468:	6030      	str	r0, [r6, #0]
 800846a:	4621      	mov	r1, r4
 800846c:	4628      	mov	r0, r5
 800846e:	f000 f8b7 	bl	80085e0 <_sbrk_r>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	d00a      	beq.n	800848c <sbrk_aligned+0x34>
 8008476:	1cc4      	adds	r4, r0, #3
 8008478:	f024 0403 	bic.w	r4, r4, #3
 800847c:	42a0      	cmp	r0, r4
 800847e:	d007      	beq.n	8008490 <sbrk_aligned+0x38>
 8008480:	1a21      	subs	r1, r4, r0
 8008482:	4628      	mov	r0, r5
 8008484:	f000 f8ac 	bl	80085e0 <_sbrk_r>
 8008488:	3001      	adds	r0, #1
 800848a:	d101      	bne.n	8008490 <sbrk_aligned+0x38>
 800848c:	f04f 34ff 	mov.w	r4, #4294967295
 8008490:	4620      	mov	r0, r4
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	20004b94 	.word	0x20004b94

08008498 <_malloc_r>:
 8008498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849c:	1ccd      	adds	r5, r1, #3
 800849e:	f025 0503 	bic.w	r5, r5, #3
 80084a2:	3508      	adds	r5, #8
 80084a4:	2d0c      	cmp	r5, #12
 80084a6:	bf38      	it	cc
 80084a8:	250c      	movcc	r5, #12
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	4607      	mov	r7, r0
 80084ae:	db01      	blt.n	80084b4 <_malloc_r+0x1c>
 80084b0:	42a9      	cmp	r1, r5
 80084b2:	d905      	bls.n	80084c0 <_malloc_r+0x28>
 80084b4:	230c      	movs	r3, #12
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	2600      	movs	r6, #0
 80084ba:	4630      	mov	r0, r6
 80084bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c0:	4e2e      	ldr	r6, [pc, #184]	; (800857c <_malloc_r+0xe4>)
 80084c2:	f000 f89d 	bl	8008600 <__malloc_lock>
 80084c6:	6833      	ldr	r3, [r6, #0]
 80084c8:	461c      	mov	r4, r3
 80084ca:	bb34      	cbnz	r4, 800851a <_malloc_r+0x82>
 80084cc:	4629      	mov	r1, r5
 80084ce:	4638      	mov	r0, r7
 80084d0:	f7ff ffc2 	bl	8008458 <sbrk_aligned>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	4604      	mov	r4, r0
 80084d8:	d14d      	bne.n	8008576 <_malloc_r+0xde>
 80084da:	6834      	ldr	r4, [r6, #0]
 80084dc:	4626      	mov	r6, r4
 80084de:	2e00      	cmp	r6, #0
 80084e0:	d140      	bne.n	8008564 <_malloc_r+0xcc>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	4631      	mov	r1, r6
 80084e6:	4638      	mov	r0, r7
 80084e8:	eb04 0803 	add.w	r8, r4, r3
 80084ec:	f000 f878 	bl	80085e0 <_sbrk_r>
 80084f0:	4580      	cmp	r8, r0
 80084f2:	d13a      	bne.n	800856a <_malloc_r+0xd2>
 80084f4:	6821      	ldr	r1, [r4, #0]
 80084f6:	3503      	adds	r5, #3
 80084f8:	1a6d      	subs	r5, r5, r1
 80084fa:	f025 0503 	bic.w	r5, r5, #3
 80084fe:	3508      	adds	r5, #8
 8008500:	2d0c      	cmp	r5, #12
 8008502:	bf38      	it	cc
 8008504:	250c      	movcc	r5, #12
 8008506:	4629      	mov	r1, r5
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff ffa5 	bl	8008458 <sbrk_aligned>
 800850e:	3001      	adds	r0, #1
 8008510:	d02b      	beq.n	800856a <_malloc_r+0xd2>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	442b      	add	r3, r5
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	e00e      	b.n	8008538 <_malloc_r+0xa0>
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	1b52      	subs	r2, r2, r5
 800851e:	d41e      	bmi.n	800855e <_malloc_r+0xc6>
 8008520:	2a0b      	cmp	r2, #11
 8008522:	d916      	bls.n	8008552 <_malloc_r+0xba>
 8008524:	1961      	adds	r1, r4, r5
 8008526:	42a3      	cmp	r3, r4
 8008528:	6025      	str	r5, [r4, #0]
 800852a:	bf18      	it	ne
 800852c:	6059      	strne	r1, [r3, #4]
 800852e:	6863      	ldr	r3, [r4, #4]
 8008530:	bf08      	it	eq
 8008532:	6031      	streq	r1, [r6, #0]
 8008534:	5162      	str	r2, [r4, r5]
 8008536:	604b      	str	r3, [r1, #4]
 8008538:	4638      	mov	r0, r7
 800853a:	f104 060b 	add.w	r6, r4, #11
 800853e:	f000 f865 	bl	800860c <__malloc_unlock>
 8008542:	f026 0607 	bic.w	r6, r6, #7
 8008546:	1d23      	adds	r3, r4, #4
 8008548:	1af2      	subs	r2, r6, r3
 800854a:	d0b6      	beq.n	80084ba <_malloc_r+0x22>
 800854c:	1b9b      	subs	r3, r3, r6
 800854e:	50a3      	str	r3, [r4, r2]
 8008550:	e7b3      	b.n	80084ba <_malloc_r+0x22>
 8008552:	6862      	ldr	r2, [r4, #4]
 8008554:	42a3      	cmp	r3, r4
 8008556:	bf0c      	ite	eq
 8008558:	6032      	streq	r2, [r6, #0]
 800855a:	605a      	strne	r2, [r3, #4]
 800855c:	e7ec      	b.n	8008538 <_malloc_r+0xa0>
 800855e:	4623      	mov	r3, r4
 8008560:	6864      	ldr	r4, [r4, #4]
 8008562:	e7b2      	b.n	80084ca <_malloc_r+0x32>
 8008564:	4634      	mov	r4, r6
 8008566:	6876      	ldr	r6, [r6, #4]
 8008568:	e7b9      	b.n	80084de <_malloc_r+0x46>
 800856a:	230c      	movs	r3, #12
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	4638      	mov	r0, r7
 8008570:	f000 f84c 	bl	800860c <__malloc_unlock>
 8008574:	e7a1      	b.n	80084ba <_malloc_r+0x22>
 8008576:	6025      	str	r5, [r4, #0]
 8008578:	e7de      	b.n	8008538 <_malloc_r+0xa0>
 800857a:	bf00      	nop
 800857c:	20004b90 	.word	0x20004b90

08008580 <_realloc_r>:
 8008580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008584:	4680      	mov	r8, r0
 8008586:	4614      	mov	r4, r2
 8008588:	460e      	mov	r6, r1
 800858a:	b921      	cbnz	r1, 8008596 <_realloc_r+0x16>
 800858c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008590:	4611      	mov	r1, r2
 8008592:	f7ff bf81 	b.w	8008498 <_malloc_r>
 8008596:	b92a      	cbnz	r2, 80085a4 <_realloc_r+0x24>
 8008598:	f7ff ff12 	bl	80083c0 <_free_r>
 800859c:	4625      	mov	r5, r4
 800859e:	4628      	mov	r0, r5
 80085a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a4:	f000 f838 	bl	8008618 <_malloc_usable_size_r>
 80085a8:	4284      	cmp	r4, r0
 80085aa:	4607      	mov	r7, r0
 80085ac:	d802      	bhi.n	80085b4 <_realloc_r+0x34>
 80085ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085b2:	d812      	bhi.n	80085da <_realloc_r+0x5a>
 80085b4:	4621      	mov	r1, r4
 80085b6:	4640      	mov	r0, r8
 80085b8:	f7ff ff6e 	bl	8008498 <_malloc_r>
 80085bc:	4605      	mov	r5, r0
 80085be:	2800      	cmp	r0, #0
 80085c0:	d0ed      	beq.n	800859e <_realloc_r+0x1e>
 80085c2:	42bc      	cmp	r4, r7
 80085c4:	4622      	mov	r2, r4
 80085c6:	4631      	mov	r1, r6
 80085c8:	bf28      	it	cs
 80085ca:	463a      	movcs	r2, r7
 80085cc:	f7ff fbb8 	bl	8007d40 <memcpy>
 80085d0:	4631      	mov	r1, r6
 80085d2:	4640      	mov	r0, r8
 80085d4:	f7ff fef4 	bl	80083c0 <_free_r>
 80085d8:	e7e1      	b.n	800859e <_realloc_r+0x1e>
 80085da:	4635      	mov	r5, r6
 80085dc:	e7df      	b.n	800859e <_realloc_r+0x1e>
	...

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d06      	ldr	r5, [pc, #24]	; (80085fc <_sbrk_r+0x1c>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	f7f8 fdc0 	bl	8001170 <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20004b98 	.word	0x20004b98

08008600 <__malloc_lock>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__malloc_lock+0x8>)
 8008602:	f000 b811 	b.w	8008628 <__retarget_lock_acquire_recursive>
 8008606:	bf00      	nop
 8008608:	20004b9c 	.word	0x20004b9c

0800860c <__malloc_unlock>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__malloc_unlock+0x8>)
 800860e:	f000 b80c 	b.w	800862a <__retarget_lock_release_recursive>
 8008612:	bf00      	nop
 8008614:	20004b9c 	.word	0x20004b9c

08008618 <_malloc_usable_size_r>:
 8008618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800861c:	1f18      	subs	r0, r3, #4
 800861e:	2b00      	cmp	r3, #0
 8008620:	bfbc      	itt	lt
 8008622:	580b      	ldrlt	r3, [r1, r0]
 8008624:	18c0      	addlt	r0, r0, r3
 8008626:	4770      	bx	lr

08008628 <__retarget_lock_acquire_recursive>:
 8008628:	4770      	bx	lr

0800862a <__retarget_lock_release_recursive>:
 800862a:	4770      	bx	lr

0800862c <_init>:
 800862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862e:	bf00      	nop
 8008630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008632:	bc08      	pop	{r3}
 8008634:	469e      	mov	lr, r3
 8008636:	4770      	bx	lr

08008638 <_fini>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	bf00      	nop
 800863c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863e:	bc08      	pop	{r3}
 8008640:	469e      	mov	lr, r3
 8008642:	4770      	bx	lr
